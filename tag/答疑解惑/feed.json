{
    "version": "https://jsonfeed.org/version/1",
    "title": "CatIsNotFound • All posts by \"答疑解惑\" tag",
    "description": "一个基于 Hexo 框架的个人博客网站",
    "home_page_url": "https://CatIsNotFound.github.io",
    "items": [
        {
            "id": "https://catisnotfound.github.io/2024/12/%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91-%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%9C%A8-C-%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%B8%80%E8%A1%8C%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95/",
            "url": "https://catisnotfound.github.io/2024/12/%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91-%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%9C%A8-C-%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%B8%80%E8%A1%8C%E8%BE%93%E5%85%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B9%E6%B3%95/",
            "title": "[答疑解惑] 关于如何在 C++ 中获取一行输入字符串的方法",
            "date_published": "2024-12-04T06:14:10.000Z",
            "content_html": "<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>在 C++ 中，<code>std:cin</code> 是标准输入流，主要用于等待并获取用户输入的内容，但获取用户输入一行的字符串内容，就不能直接用 <code>cin</code> 来获取。</p>\n<p>示例代码：输出用户输入的字符串</p>\n<p>假如用户输入了一行内容中包含<strong>空格</strong>或者<strong>制表符</strong> <code>Tab</code> 等空白字符的字符串，空白字符及后面的所有部分会被忽略，导致只能输出空白字符前的字符串。</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> line[<span class=\"number\">64</span>];</span><br><span class=\"line\">    cin &gt;&gt; line;</span><br><span class=\"line\">    cout &lt;&lt; line &lt;&lt; endl;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 输出样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure></div>\n\n\n\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><p><strong>1、利用 <code>string</code> 中的 <code>getline()</code> 方法</strong></p>\n<p>可以将需要获取的变量类型从 <code>char</code> 改为 <code>string</code> 类型，并使用 <code>getline()</code> 方法以获取行内的内容。</p>\n<p><strong>使用方法：<code>getline()</code></strong></p>\n<ul>\n<li><p>其函数定义于 <code>&lt;string&gt;</code> 头文件中，其函数原型如下：(只提其中一种使用方法)</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">istream&amp; <span class=\"title\">getline</span><span class=\"params\">( istream&amp; is, string&amp; str )</span></span>;</span><br></pre></td></tr></table></figure></div>\n</li>\n<li><p>其中的参数含义如下：</p>\n<ul>\n<li><code>is</code>：输入流对象。可以是 <code>cin</code>、<code>fstream</code>、<code>istream</code> 类型的指针等。</li>\n<li><code>str</code>：用于存储读取的字符串。</li>\n</ul>\n</li>\n</ul>\n<p>因此，根据此方法，可以这么写：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string line;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin, line);</span><br><span class=\"line\">    cout &lt;&lt; line &lt;&lt; endl;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 输出样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello world!</span></span><br></pre></td></tr></table></figure></div>\n\n<p>附加：getline() 与 gets()</p>\n<p><strong>2、利用 <code>cin.getline()</code> 方式</strong></p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cin.<span class=\"built_in\">getline</span>(char_type* __s, streamsize __n)</span><br></pre></td></tr></table></figure></div>\n\n<p>对应的参数如下：</p>\n<ul>\n<li><code>__s</code>：选定一个字符串对象；</li>\n<li><code>__n</code>：限制的字符个数，其区间范围为 <code>[0, n)</code>；</li>\n</ul>\n<p>针对 C 语言风格，如果要将用户输入的内容赋值给 <code>char</code> 类型的字符串数组，可以这么写：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> line[<span class=\"number\">64</span>];</span><br><span class=\"line\">    cin.<span class=\"built_in\">getline</span>(line, <span class=\"built_in\">sizeof</span>(line));</span><br><span class=\"line\">    cout &lt;&lt; line &lt;&lt; endl;    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello world!</span></span><br><span class=\"line\"><span class=\"comment\">// 输出样例：</span></span><br><span class=\"line\"><span class=\"comment\">// Hello world!</span></span><br></pre></td></tr></table></figure></div>\n\n\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/5838711/stdcin-input-with-spaces\" >c++ - std::cin input with spaces? - Stack Overflow<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.freecodecamp.org/news/getline-in-cpp-cin-getline-function-example/\" >Getline in C++ – cin getline() Function Example<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n",
            "tags": [
                "新手向",
                "C_and_Cpp",
                "答疑解惑"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/12/%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91-%E5%85%B3%E4%BA%8E-gets-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E5%9C%A8C-11%E5%8F%8A%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "url": "https://catisnotfound.github.io/2024/12/%E7%AD%94%E7%96%91%E8%A7%A3%E6%83%91-%E5%85%B3%E4%BA%8E-gets-%E5%87%BD%E6%95%B0%E4%B8%8D%E8%83%BD%E5%9C%A8C-11%E5%8F%8A%E4%BB%A5%E5%90%8E%E4%BD%BF%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/",
            "title": "[答疑解惑] C++ 中的 gets() 函数替代方案",
            "date_published": "2024-12-03T12:16:06.000Z",
            "content_html": "<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>在学习 C++ 的时候，发现 <code>gets()</code> 函数不能直接在 C++ 环境下使用。</p>\n<p>下述代码中，本人编写了较为简单的程序，用于输出用户输入行内的两段内容。</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c_name[<span class=\"number\">127</span>];</span><br><span class=\"line\">    string s_name;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Please input your name:&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">gets</span>(c_name);</span><br><span class=\"line\">    <span class=\"comment\">// 当 c_name 长度小于 2 时，要求重新输入</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">strlen</span>(c_name) &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Error: Please input again!\\nYour name:&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">gets</span>(c_name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 输出结果</span></span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Your name: &quot;</span> &lt;&lt; c_name &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<p>很显然，运行后出现了以下报错内容：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">error: ‘gets’ was not declared in this scope; did you mean ‘getw’?</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"分析原因-解决方案\"><a href=\"#分析原因-解决方案\" class=\"headerlink\" title=\"分析原因 &amp; 解决方案\"></a>分析原因 &amp; 解决方案</h1><p>C++ 11 及以后版本中，<code>gets()</code> 函数已被废弃，因为其存在安全漏洞，即 <code>gets()</code> 函数在输入字符串时，<strong>不会检查字符串的长度</strong>，可能会<strong>导致缓冲区溢出</strong>。</p>\n<p>因此，在 C++ 中，针对 <code>char</code> 类型的字符串，一般使用 <code>fgets()</code> 函数来代替； </p>\n<p><code>fgets()</code> 函数可以正确地检查字符串的长度，避免缓冲区溢出。</p>\n<h1 id=\"函数使用\"><a href=\"#函数使用\" class=\"headerlink\" title=\"函数使用\"></a>函数使用</h1><p><strong><code>fgets()</code> 函数</strong></p>\n<p>其函数定义于 <code>&lt;cstdio&gt;</code> 头文件中，其函数原型如下：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">char</span>* <span class=\"title\">fgets</span><span class=\"params\">( <span class=\"type\">char</span>* str, <span class=\"type\">int</span> count, std::FILE* stream )</span></span>;</span><br></pre></td></tr></table></figure></div>\n\n<p>其中的参数含义如下：</p>\n<ul>\n<li><code>str</code>：用于存储读取的字符串。</li>\n<li><code>count</code>：读取的字符串的最大长度，包括字符串结束符。</li>\n<li><code>stream</code>：文件流对象。可以是 <code>stdin</code>、<code>stdout</code>、<code>stderr</code>、<code>FILE*</code> 类型的指针等。</li>\n</ul>\n<h1 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h1><p>根据如上的分析与解决方案，由 <a href=\"#%E7%AE%80%E8%BF%B0\">【简述】</a> 中所述的代码示例可改写成如下：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> c_name[<span class=\"number\">127</span>];</span><br><span class=\"line\">    string s_name;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Please input your name:&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">fgets</span>(c_name, <span class=\"number\">127</span>, stdin);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">strlen</span>(c_name) &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Error: Please input again!\\nYour name:&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">fgets</span>(c_name, <span class=\"number\">127</span>, stdin);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Your name in char: &quot;</span> &lt;&lt; c_name;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ol>\n<li><a class=\"link\"   href=\"https://cppreference.cn/w/cpp/io/c/fgets\" >std::fgets - cppreference.com - C++参考手册<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://cppreference.cn/w/c/io/gets\" >gets, gets_s - cppreference.com - C++参考手册<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.dotcpp.com/course/868\" >为什么gets函数不能用了？ - ACM与蓝桥杯竞赛指南 - C语言网<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ol>\n",
            "tags": [
                "新手向",
                "C_and_Cpp",
                "答疑解惑"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/09/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94-%E5%85%B3%E4%BA%8E-Github-%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "url": "https://catisnotfound.github.io/2024/09/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94-%E5%85%B3%E4%BA%8E-Github-%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "title": "[答疑解惑] 关于 Github 的问题解决方法",
            "date_published": "2024-09-01T04:48:45.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><img loading=\"lazy\" src=\"https://askanydifference.com/wp-content/uploads/2023/06/github.jpg\" alt=\"Github\" width=\"75%\">\n\n<p>Github 是一个很常用的代码托管平台，我们可以利用此平台下载或克隆到优质的代码仓库，但是在某些情况下，我们可能会遇到一些问题，下面是由本人列举的一些问题与解决方法，希望这能有所帮助😉。</p>\n<h1 id=\"1、Github-访问不了\"><a href=\"#1、Github-访问不了\" class=\"headerlink\" title=\"1、Github 访问不了\"></a>1、Github 访问不了</h1><p>大多数国内的用户在访问 Github 时总会遇到加载速度缓慢，甚至无法访问站点的情况。关于此类问题，有以下几个方法解决：</p>\n<h2 id=\"1-1-利用-Watt-Toolkit-加速访问-👍\"><a href=\"#1-1-利用-Watt-Toolkit-加速访问-👍\" class=\"headerlink\" title=\"1.1 利用 Watt Toolkit 加速访问 👍\"></a>1.1 利用 Watt Toolkit 加速访问 👍</h2><p>众所周知，Watt Toolkit (Steam++ 前身) 是一个非常适合新手的软件，你仅需在【网络加速】页面上勾选上 <i class=\"fa-brands fa-github\"></i> Github 选项，点击 [立即加速] 即可。这也是本人最为推荐的方法。</p>\n<a class=\"button  center large\" href='https://steampp.net/' title='Watt Toolkit 下载'><i class='fa-solid fa-download'></i> Watt Toolkit 下载</a>\n\n<p><img loading=\"lazy\" src=\"/images/2024/0901/1.jpg\"></p>\n<h2 id=\"1-2-使用代理加速访问\"><a href=\"#1-2-使用代理加速访问\" class=\"headerlink\" title=\"1.2 使用代理加速访问\"></a>1.2 使用代理加速访问</h2><p>如果有经济条件，使用代理服务器是非常不错的选择。现如今，本人最推荐的是以下两款主流的代理软件：</p>\n<p><strong>V2rayNG</strong>：一个基于 v2ray 的免费开源软件，支持 Windows、Android、iOS 等平台。</p>\n<a class=\"button  center large\" href='https://github.com/2dust/v2rayNG/releases' title='V2rayNG 下载'><i class='fa-brands fa-github'></i> V2rayNG 下载</a>\n<p><strong>Clash 小猫咪</strong>：一个开源的代理软件，支持 Windows、Android、iOS 等平台。</p>\n<a class=\"button  center large\" href='https://github.com/clashdownload/Clash' title='Clash 下载'><i class='fa-brands fa-github'></i> Clash 下载</a>\n\n<p>如果需要追求网络稳定、快速，那么<strong>购买靠谱的节点或机场</strong>是不错的选择。反之，如果没有经济条件，选择<strong>免费节点</strong>也是不错的选择，但不能保证网络一直稳定、快速。</p>\n<p>关于免费节点的获取，本文就不分享免费节点站点了，请自行使用必应或 Google 搜索。</p>\n<p><strong>注意：寻找免费节点时，请尽量不要使用百度搜索！</strong></p>\n<h1 id=\"2、无法从-Github-项目中克隆或推送项目\"><a href=\"#2、无法从-Github-项目中克隆或推送项目\" class=\"headerlink\" title=\"2、无法从 Github 项目中克隆或推送项目\"></a>2、无法从 Github 项目中克隆或推送项目</h1><p>此类问题非常常见，当你在终端下执行 <code>git clone &lt;URL&gt;</code> 或者 <code>git push -u origin main</code> 时，可能会出现不同程度的报错：</p>\n<h2 id=\"2-1-443-端口无法连接\"><a href=\"#2-1-443-端口无法连接\" class=\"headerlink\" title=\"2.1 443 端口无法连接\"></a>2.1 443 端口无法连接</h2><div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/XXX/XXX.git/&#x27;: Failed to connect to github.com port 443 after 21066 ms: Could not connect to server</span><br></pre></td></tr></table></figure></div>\n\n<p>此类问题下最好是通过<strong>使用代理</strong>，在使用此方法前，首先请确保你已安装如上提到的软件，如：Clash、V2rayNG 等。</p>\n<p>不同的软件，对应使用的端口也不相同，具体如下：</p>\n<p><strong>1、Clash 小猫咪</strong></p>\n<p>通过其默认端口 <code>7890</code> 以直接配置如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy 127.0.0.1:7890</span><br><span class=\"line\">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、V2rayNG</strong></p>\n<p>关于此软件，需要打开软件主界面，在如下图所指示的地址就是配置代理的选项，</p>\n<p><img loading=\"lazy\" src=\"/images/2024/0901/3.jpg\" alt=\"新版 UI\"></p>\n\n  <div class=\"note p-4 mb-4 rounded-small yellow icon-padding\">\n    <i class=\"note-icon fa-solid fa-circle-exclamation\"></i><p><strong>注意：</strong></p>\n<p>V2rayN 的 UI 版本不同，如果使用的是旧版本的 V2rayN，则为如下图所指示：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/0901/2.jpg\" alt=\"旧版 UI\"></p>\n\n  </div>\n\n<p>这里就按照 Http 所提供的端口 <code>10809</code> 进行配置即可：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy 127.0.0.1:10809</span><br><span class=\"line\">git config --global https.proxy 127.0.0.1:10809</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"2-2-Git-中的-Github-邮箱与密码\"><a href=\"#2-2-Git-中的-Github-邮箱与密码\" class=\"headerlink\" title=\"2.2 Git 中的 Github 邮箱与密码\"></a>2.2 Git 中的 Github 邮箱与密码</h2><p>假如你需要在 Github 中克隆一个私有的项目仓库或推送项目仓库时，往往会出现如下情况：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username for &#x27;https://github.com&#x27;:</span><br><span class=\"line\">Password for &#x27;https://username@github.com&#x27;:</span><br></pre></td></tr></table></figure></div>\n\n<p>此类情况下，你需要输入<strong>对应的用户名和对应的 Token</strong> 才能继续操作。关于 Token 的获取，请看下文。</p>\n<ol>\n<li><p>首先点击此链接 <a class=\"link\"   href=\"https://github.com/settings/tokens/new\" >New Personal Access Token (Classic) (github.com)<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p>根据如下图所示操作：<br><img loading=\"lazy\" src=\"/images/2024/0424/1.jpg\"></p>\n</li>\n<li><p>完成后点击最下方的绿色按钮【Generate token】，这将会生成一个随机的 token，如下图：<br><img loading=\"lazy\" src=\"/images/2024/0424/2.jpg\"></p>\n<p>上图中的绿色框为所需要的 Token​。</p>\n\n  <div class=\"note p-4 mb-4 rounded-small danger icon-padding\">\n    <i class=\"note-icon fa-solid fa-solid fa-circle-info\"></i><p><strong>需要注意：</strong></p>\n<p>​\t每次仅会显示一次完整的 Token，下一次刷新页面后将会完全隐藏，建议生成后做好备份！</p>\n\n  </div></li>\n</ol>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>本篇内容仅是本人在 Github 上的常见问题，如果遇到其它问题或者有更好的解决方案，欢迎在评论区下留言！</p>\n",
            "tags": [
                "新手向",
                "Git",
                "Github",
                "答疑解惑"
            ]
        }
    ]
}