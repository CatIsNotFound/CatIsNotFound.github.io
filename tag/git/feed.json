{
    "version": "https://jsonfeed.org/version/1",
    "title": "CatIsNotFound • All posts by \"git\" tag",
    "description": "一个基于 Hexo 框架的个人博客网站",
    "home_page_url": "https://CatIsNotFound.github.io",
    "items": [
        {
            "id": "https://catisnotfound.github.io/2024/11/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0-Oh-my-zsh-%E5%93%A6-%E6%88%91%E9%82%A3%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF/",
            "url": "https://catisnotfound.github.io/2024/11/%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0-Oh-my-zsh-%E5%93%A6-%E6%88%91%E9%82%A3%E5%A5%BD%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF/",
            "title": "[折腾日记] Oh-my-zsh 哦~我那好用的终端",
            "date_published": "2024-11-27T03:58:30.000Z",
            "content_html": "<h1 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h1><p>写这篇文章的初衷主要是为了记录曾经在 Linux 上折腾过的各种过程，并将其写成类似于学习教程的形式以此来帮助跟作者本人一样在折腾 Linux 的人。</p>\n<p>如果你也正在折腾 Linux，那么请简要阅读这篇文章，希望这能有所帮助。 (￣︶￣*)</p>\n<h1 id=\"折腾环境\"><a href=\"#折腾环境\" class=\"headerlink\" title=\"折腾环境\"></a>折腾环境</h1><p>这里本人使用的是基于 WSL 2 下的 Debian 发行版系统，</p>\n<p>如果你已安装 WSL，可直接执行如下：</p>\n<div class=\"code-container\" data-rel=\"Powershell\"><figure class=\"iseeu highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe <span class=\"literal\">--install</span> <span class=\"literal\">-d</span> debian</span><br></pre></td></tr></table></figure></div>\n\n<p>当然，如果需要其它可安装的发行版系统，可直接执行：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl.exe -l -o</span><br></pre></td></tr></table></figure></div>\n\n<p>如果未安装 WSL？不如看看这篇？</p>\n<a class=\"button  center large\" href='/2024/06/WSL：一个适用于-Windows-的-Linux-子系统/' title='WSL：一个适用于 Windows 的 Linux 子系统'><i class='fas fa-link'></i> WSL：一个适用于 Windows 的 Linux 子系统</a>\n\n<h1 id=\"折腾全过程\"><a href=\"#折腾全过程\" class=\"headerlink\" title=\"折腾全过程\"></a>折腾全过程</h1><p>很显然，默认环境下的 WSL 除了勉强能用的 <kbd>Tab</kbd> 命令&#x2F;目录补全、<kbd>Ctrl</kbd> + <kbd>R</kbd> 历史记录回溯之外，貌似啥也没有了(ˉ▽ˉ；)…</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debian@DESKTOP-EPQI5KJ:~$ _</span><br></pre></td></tr></table></figure></div>\n\n<p>是的，就是这样。一个平平无奇的交互界面。</p>\n<p>但为了能更好地改造交互，不仅要改变外观，还要增加其可用程度。以下是本人折腾时的简要过程。</p>\n<h2 id=\"1-安装必需软件包\"><a href=\"#1-安装必需软件包\" class=\"headerlink\" title=\"1. 安装必需软件包\"></a>1. 安装必需软件包</h2><p>很显然，要想改变这一切，需要先改变当前的 Shell 环境。欲查看当前的环境，只需执行：<code>echo $SHELL</code>。这里作者默认使用 Bash 环境，其输出为：<code>/bin/bash</code>。</p>\n<p>不过在此之前，首先就是需要使用 APT 包管理器来安装所需要的软件包。</p>\n<blockquote>\n<p>注：这里的 APT 不是想象的那个 APT，而是那个具有超级牛力的 APT [doge]。</p>\n</blockquote>\n<p>执行命令如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install git zsh curl vim neofetch -y <span class=\"comment\"># 这里的 neofetch 可不装，这里纯粹是为了装 X 用的</span></span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p><strong>💡 关于下载速度慢的解决方法：</strong></p>\n<p>使用 APT 时出现下载慢？很可能是因为💿<strong>镜像源</strong>，要想改善其下载速度，<strong>直接修改镜像源即可</strong>。</p>\n<p>这里作者使用清华源镜像以加速，当然还可以用其它的开源镜像站。</p>\n<p>你只需要执行如下命令，即可一次性完成替换镜像源：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &gt; /etc/apt/sources.list &lt;&lt; <span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-updates main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bookworm-backports main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">deb https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\"># deb-src https://security.debian.org/debian-security bookworm-security main contrib non-free non-free-firmware</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br></pre></td></tr></table></figure></div>\n\n<p>步骤 2：更新软件源</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt update</span><br></pre></td></tr></table></figure></div>\n\n<p>步骤 3：下载到一半时取消？直接带上 <code>--fix-missing</code> 选项就可以继续未完成的下载了O(∩_∩)O。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> apt install git zsh curl vim neofetch -y --fix-missing</span><br></pre></td></tr></table></figure></div>\n</blockquote>\n<h2 id=\"2-切换-Shell-环境\"><a href=\"#2-切换-Shell-环境\" class=\"headerlink\" title=\"2. 切换 Shell 环境\"></a>2. 切换 Shell 环境</h2><p>当你完成了下载以及安装之后，执行如下命令，可直接将 Bash 更改为 Zsh 环境</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></div>\n\n<p>执行后，只需重新登录此用户，你会看到如下提示界面：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">This is the Z Shell configuration function for new users,</span><br><span class=\"line\">zsh-newuser-install.</span><br><span class=\"line\">You are seeing this message because you have no zsh startup files</span><br><span class=\"line\">(the files .zshenv, .zprofile, .zshrc, .zlogin in the directory</span><br><span class=\"line\">~).  This function can help you with a few settings that should</span><br><span class=\"line\">make your use of the shell easier.</span><br><span class=\"line\"></span><br><span class=\"line\">You can:</span><br><span class=\"line\"></span><br><span class=\"line\">(q)  Quit and do nothing.  The function will be run again next time.</span><br><span class=\"line\"></span><br><span class=\"line\">(0)  Exit, creating the file ~/.zshrc containing just a comment.</span><br><span class=\"line\">     That will prevent this function being run again.</span><br><span class=\"line\"></span><br><span class=\"line\">(1)  Continue to the main menu.</span><br><span class=\"line\"></span><br><span class=\"line\">(2)  Populate your ~/.zshrc with the configuration recommended</span><br><span class=\"line\">     by the system administrator and exit (you will need to edit</span><br><span class=\"line\">     the file by hand, if so desired).</span><br><span class=\"line\"></span><br><span class=\"line\">--- Type one of the keys in parentheses ---</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>没错，到这里已经是完成了一部分！此步骤下，可以直接按下 <code>0</code>，不做任何配置即可。之后，你会看到全新的命令行显示。如下：</p>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">DESKTOP-EPQI5KJ% </span><span class=\"language-bash\">_</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"3-安装与配置-Oh-my-zsh\"><a href=\"#3-安装与配置-Oh-my-zsh\" class=\"headerlink\" title=\"3. 安装与配置 Oh-my-zsh\"></a>3. 安装与配置 Oh-my-zsh</h2><p>虽然，已经成功了一部分，但还是缺少了灵魂。为了能让自己的 zsh 变得更极具美观，安装 oh-my-zsh 或许是一个非常不错的一种方式。</p>\n<h3 id=\"安装-Oh-my-zsh\"><a href=\"#安装-Oh-my-zsh\" class=\"headerlink\" title=\"安装 Oh-my-zsh\"></a>安装 Oh-my-zsh</h3><p>这里为了方便国内用户下载 Oh-my-zsh，这里就直接<strong>采用清华源下载的方法</strong>来执行如下操作：</p>\n<blockquote>\n<p>详情说明见：<a class=\"link\"   href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ohmyzsh.git/\" >ohmyzsh.git | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> ~/</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://mirrors.tuna.tsinghua.edu.cn/git/ohmyzsh.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ohmyzsh/tools</span><br><span class=\"line\">REMOTE=https://mirrors.tuna.tsinghua.edu.cn/git/ohmyzsh.git sh install.sh</span><br></pre></td></tr></table></figure></div>\n\n<p>等待一系列操作后，你将会看到安装成功的画面：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looking for an existing zsh config...</span><br><span class=\"line\">Found /home/test/.zshrc. Backing up to /home/test/.zshrc.pre-oh-my-zsh</span><br><span class=\"line\">Using the Oh My Zsh template file and adding it to /home/test/.zshrc.</span><br><span class=\"line\"></span><br><span class=\"line\">         __                                     __</span><br><span class=\"line\">  ____  / /_     ____ ___  __  __   ____  _____/ /_</span><br><span class=\"line\"> / __ \\/ __ \\   / __ `__ \\/ / / /  /_  / / ___/ __ \\</span><br><span class=\"line\">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span><br><span class=\"line\">\\____/_/ /_/  /_/ /_/ /_/\\__, /    /___/____/_/ /_/</span><br><span class=\"line\">                        /____/                       ....is now installed!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Before you scream Oh My Zsh! look over the `.zshrc` file to select plugins, themes, and options.</span><br><span class=\"line\"></span><br><span class=\"line\">• Follow us on X: https://x.com/ohmyzsh</span><br><span class=\"line\">• Join our Discord community: https://discord.gg/ohmyzsh</span><br><span class=\"line\">• Get stickers, t-shirts, coffee mugs and more: https://shop.planetargon.com/collections/oh-my-zsh</span><br><span class=\"line\"></span><br><span class=\"line\">➜  tools _</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"配置我的-zsh\"><a href=\"#配置我的-zsh\" class=\"headerlink\" title=\"配置我的 zsh\"></a>配置我的 zsh</h3><p>是的，当你看到如上的画面时，Oh-my-zsh 的安装就已经完成了！不过，这要怎么配置我的 zsh 呢？</p>\n<p>直接利用 vim 打开 <code>~/.zshrc</code> 文件，在这里你可以添加插件以及修改正在使用的主题。</p>\n<p><strong>提示：以下所提到的主题、插件等配置都需要在  <code>~/.zshrc</code> 配置文件中修改。</strong></p>\n<h4 id=\"1-改变主题\"><a href=\"#1-改变主题\" class=\"headerlink\" title=\"(1) 改变主题\"></a>(1) 改变主题</h4><p>在 <code>ZSH_THEME</code> 变量中修改对应主题</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME=<span class=\"string\">&quot;robbyrussell&quot;</span> <span class=\"comment\"># 默认主题</span></span><br><span class=\"line\">ZSH_THEME=<span class=\"string\">&quot;random&quot;</span> \t\t <span class=\"comment\"># 不确定或有多个常用外观的情况下，random 是个不错的选项</span></span><br></pre></td></tr></table></figure></div>\n\n<p>关于所有可用的主题，执行：<code>ls -1 $ZSH/themes | cut -d &#39;.&#39; -f1 | less</code> 可直接查看。</p>\n<blockquote>\n<p>关于主题预览，可直接访问：<a class=\"link\"   href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Themes\" >https://github.com/ohmyzsh/ohmyzsh/wiki/Themes<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<p>当你遇到不太确定的主题或者遇到喜欢多个主题时，在 <code>ZSH_THEME</code> 变量中设置为 <code>random</code> 是个很不错的主意(*￣3￣)╭（如果你真心找不到什么特别好看的主题）</p>\n<p>当你设置成随机主题时，再次重新登录时，你会看到类似这样的画面：</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[oh-my-zsh] Random theme <span class=\"string\">&#x27;juanghurtado&#x27;</span> loaded</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">test</span>@DESKTOP-EPQI5KJ:/home/debian</span><br><span class=\"line\">&gt; _</span><br></pre></td></tr></table></figure></div>\n\n<p>除了上面的提示，你还可以直接通过 <code>echo $RANDOM_THEME</code> 来查看随机到的主题名称。</p>\n<p>如果你遇到了几个比较满意的主题，可以直接将其记录到 <code>ZSH_THEME_RANDOM_CANDIDATES</code> 变量中，这样以后每次登录都只会在此变量中随机选择主题。</p>\n<p>例如：作者就对 <code>juanghurtado</code>, <code>essembeh</code>, <code>tjkirch</code>, <code>apple</code> 等主题感兴趣，那么可以将这几个主题都填入到该变量中。内容如下：</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ZSH_THEME_RANDOM_CANDIDATES=( <span class=\"string\">&quot;juanghurtado&quot;</span> <span class=\"string\">&quot;essembeh&quot;</span> <span class=\"string\">&quot;tjkirch&quot;</span> <span class=\"string\">&quot;apple&quot;</span> ) <span class=\"comment\"># 注意空格分隔</span></span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：此变量大约在文件的第 18 行左右，只需将最前面的 <code>#</code> 去掉即可。</strong></p>\n<h4 id=\"2-通用插件\"><a href=\"#2-通用插件\" class=\"headerlink\" title=\"(2) 通用插件\"></a>(2) 通用插件</h4><p>为了能够让终端变得更加好用，首先来推荐几个内置的 ZSH 插件。</p>\n<ul>\n<li><p><code>aliases</code>：基于 <code>alias</code> 命令，可快速搜索短命令（简写命令）；其命令为 <code>als</code>。<a class=\"link\"   href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/aliases\" >点此查看所有用法<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>。</p>\n<ul>\n<li><p>简要用法 1：<code>als -g git</code> 查看 <code>git</code> 组下的所有短命令；</p>\n</li>\n<li><p>👍 <strong>简要用法 2</strong>：<code>als &lt;keys&gt;</code> 搜索包含 <code>&lt;keys&gt;</code> 的命令以及短命令；</p>\n</li>\n<li><p>简要用法 3：<code>als --groups</code> 查看所有组；</p>\n</li>\n<li><p><strong>Tips：这对于经常使用 <code>git</code> 命令的人群而言非常有用！</strong></p>\n</li>\n</ul>\n</li>\n<li><p><code>git</code>：默认启用的插件，提供更多的<a class=\"link\"   href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git#aliases\" >短命令<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>以及更有用的<a class=\"link\"   href=\"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git#functions\" >函数<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>；</p>\n<ul>\n<li>可直接搭配 <code>aliases</code> 查看所有关于 git 的短命令</li>\n</ul>\n</li>\n<li><p><code>sudo</code>：启用后，只需按下两次 <kbd>Esc</kbd> 就能在行前自动添加&#x2F;删除 <code>sudo</code> 前缀；</p>\n</li>\n<li><p><code>z</code>：显示 &#x2F; 快速进入最常访问的目录</p>\n<ul>\n<li>默认下，执行 <code>z</code> 命令，会显示前几个访问频率最高的目录；</li>\n<li>在命令行下依次键入 <code>z</code>  、<kbd>Space</kbd>  后，连续按下 <kbd>Tab</kbd> 键，可以进入经常访问过的目录。</li>\n</ul>\n</li>\n<li><p><code>zsh-navigation-tools</code>：命令历史记录回溯改良版，按下 <kbd>Ctrl</kbd> + <kbd>R</kbd> 键可快速搜索之前使用过的命令</p>\n</li>\n</ul>\n<blockquote>\n<p>TIPS：关于所有自带插件，请详见：<a class=\"link\"   href=\"https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins\" >Plugins · ohmyzsh&#x2F;ohmyzsh Wiki<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</blockquote>\n<p><strong>这里就推荐几个 Github 上非常好用的几款 ZSH 插件，以提升使用效率。</strong></p>\n<ul>\n<li><code>zsh-autosuggestions</code>：自动建议工具，根据命令历史记录来自动完成命令；</li>\n<li><code>zsh-completions</code>：自动补全命令工具，可通过 <kbd>Tab</kbd> 键以快速补全各种常用命令。</li>\n<li><code>zsh-syntax-highlighting</code>：语法检查高亮工具，可检查当前输入的命令以标记不同的颜色；</li>\n</ul>\n<blockquote>\n<p>以上推荐的额外插件，均可通过 github 上下载。对应链接如下：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://github.com/zsh-users/zsh-autosuggestions\" >https://github.com/zsh-users/zsh-autosuggestions<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/zsh-users/zsh-completions\" >https://github.com/zsh-users/zsh-completions<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/zsh-users/zsh-syntax-highlighting\" >https://github.com/zsh-users/zsh-syntax-highlighting<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n</blockquote>\n<blockquote>\n<p>国内若不能直接访问 Github，那么，请尝试使用 gitee，对应链接如下：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://gitee.com/sasukeZhou/zsh-autosuggestions\" >https://gitee.com/sasukeZhou/zsh-autosuggestions<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://gitee.com/yuhldr/zsh-completions\" >https://gitee.com/yuhldr/zsh-completions<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://gitee.com/minhanghuang/zsh-syntax-highlighting\" >https://gitee.com/minhanghuang/zsh-syntax-highlighting<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n</blockquote>\n<h4 id=\"3-添加插件\"><a href=\"#3-添加插件\" class=\"headerlink\" title=\"(3) 添加插件\"></a>(3) 添加插件</h4><p>欲添加插件，可以在 <code>~/.zshrc</code> 文件中的 <code>plugins</code> 变量来进行添加，具体如下例：</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins=(</span><br><span class=\"line\">    aliases</span><br><span class=\"line\">    git</span><br><span class=\"line\">    <span class=\"built_in\">sudo</span></span><br><span class=\"line\">    z</span><br><span class=\"line\">    zsh-navigation-tools</span><br><span class=\"line\">    zsh-autosuggestions</span><br><span class=\"line\">    zsh-completions</span><br><span class=\"line\">    zsh-syntax-highlighting</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>对于第三方插件（自行下载的插件）</strong></p>\n<p>要想添加插件，有以下几种方法：</p>\n<p><strong>👍 Git 安装</strong></p>\n<p>以安装 <code>zsh-autosuggestions</code> 为例：</p>\n<p>可直接通过命令以实现安装：</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions.git <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>手动安装</strong></p>\n<p>还是以安装 <code>zsh-autosuggestions</code> 为例，</p>\n<p>在浏览器中<a class=\"link\"   href=\"https://github.com/zsh-users/zsh-autosuggestions/releases/tag/v0.7.1\" >点击下载<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>对应的压缩包 <code>(*.zip)</code>。</p>\n<p>解压压缩包，将解压后的文件复制到 <code>$ZSH_CUSTOM/plugins/</code> 目录下。具体命令如下：</p>\n<div class=\"code-container\" data-rel=\"Sh\"><figure class=\"iseeu highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip zsh-autosuggestions-0.7.1.zip</span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r zsh-autosuggestions-0.7.1 <span class=\"variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：这里的 <code>zsh-autosuggestions-0.7.1</code> 为解压后的文件夹名称，请根据实际情况进行修改；</strong></p>\n<p><strong>注意：若当前发行版系统找不到 <code>unzip</code> 命令，请自行通过 apt 安装 <code>unzip</code> 软件包。具体命令为：<code>sudo apt install unzip -y</code>。</strong></p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>关于下一篇内容，个人考虑在 Neovim 上入手，如果有较强的折腾能力，可以尝试将 neovim 改造成一个命令行下的 IDE(*^_^*)。</p>\n<p>还是那句话：感兴趣？建议点个收藏或关注？(￣▽￣)”（多少有点不好意思）</p>\n",
            "tags": [
                "Linux",
                "新手向",
                "Git",
                "Github",
                "oh-my-zsh",
                "WSL"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/09/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94-%E5%85%B3%E4%BA%8E-Github-%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "url": "https://catisnotfound.github.io/2024/09/%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94-%E5%85%B3%E4%BA%8E-Github-%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/",
            "title": "[答疑解惑] 关于 Github 的问题解决方法",
            "date_published": "2024-09-01T04:48:45.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://askanydifference.com/wp-content/uploads/2023/06/github.jpg\"\n                      alt=\"Github\" width=\"75%\"\n                >\n\n<p>Github 是一个很常用的代码托管平台，我们可以利用此平台下载或克隆到优质的代码仓库，但是在某些情况下，我们可能会遇到一些问题，下面是由本人列举的一些问题与解决方法，希望这能有所帮助😉。</p>\n<h1 id=\"1、Github-访问不了\"><a href=\"#1、Github-访问不了\" class=\"headerlink\" title=\"1、Github 访问不了\"></a>1、Github 访问不了</h1><p>大多数国内的用户在访问 Github 时总会遇到加载速度缓慢，甚至无法访问站点的情况。关于此类问题，有以下几个方法解决：</p>\n<h2 id=\"1-1-利用-Watt-Toolkit-加速访问-👍\"><a href=\"#1-1-利用-Watt-Toolkit-加速访问-👍\" class=\"headerlink\" title=\"1.1 利用 Watt Toolkit 加速访问 👍\"></a>1.1 利用 Watt Toolkit 加速访问 👍</h2><p>众所周知，Watt Toolkit (Steam++ 前身) 是一个非常适合新手的软件，你仅需在【网络加速】页面上勾选上 <i class=\"fa-brands fa-github\"></i> Github 选项，点击 [立即加速] 即可。这也是本人最为推荐的方法。</p>\n<a class=\"button  center large\" href='https://steampp.net/' title='Watt Toolkit 下载'><i class='fa-solid fa-download'></i> Watt Toolkit 下载</a>\n\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0901/1.jpg\"\n                     \n                ></p>\n<h2 id=\"1-2-使用代理加速访问\"><a href=\"#1-2-使用代理加速访问\" class=\"headerlink\" title=\"1.2 使用代理加速访问\"></a>1.2 使用代理加速访问</h2><p>如果有经济条件，使用代理服务器是非常不错的选择。现如今，本人最推荐的是以下两款主流的代理软件：</p>\n<p><strong>V2rayNG</strong>：一个基于 v2ray 的免费开源软件，支持 Windows、Android、iOS 等平台。</p>\n<a class=\"button  center large\" href='https://github.com/2dust/v2rayNG/releases' title='V2rayNG 下载'><i class='fa-brands fa-github'></i> V2rayNG 下载</a>\n<p><strong>Clash 小猫咪</strong>：一个开源的代理软件，支持 Windows、Android、iOS 等平台。</p>\n<a class=\"button  center large\" href='https://github.com/clashdownload/Clash' title='Clash 下载'><i class='fa-brands fa-github'></i> Clash 下载</a>\n\n<p>如果需要追求网络稳定、快速，那么<strong>购买靠谱的节点或机场</strong>是不错的选择。反之，如果没有经济条件，选择<strong>免费节点</strong>也是不错的选择，但不能保证网络一直稳定、快速。</p>\n<p>关于免费节点的获取，本文就不分享免费节点站点了，请自行使用必应或 Google 搜索。</p>\n<p><strong>注意：寻找免费节点时，请尽量不要使用百度搜索！</strong></p>\n<h1 id=\"2、无法从-Github-项目中克隆或推送项目\"><a href=\"#2、无法从-Github-项目中克隆或推送项目\" class=\"headerlink\" title=\"2、无法从 Github 项目中克隆或推送项目\"></a>2、无法从 Github 项目中克隆或推送项目</h1><p>此类问题非常常见，当你在终端下执行 <code>git clone &lt;URL&gt;</code> 或者 <code>git push -u origin main</code> 时，可能会出现不同程度的报错：</p>\n<h2 id=\"2-1-443-端口无法连接\"><a href=\"#2-1-443-端口无法连接\" class=\"headerlink\" title=\"2.1 443 端口无法连接\"></a>2.1 443 端口无法连接</h2><div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fatal: unable to access &#x27;https://github.com/XXX/XXX.git/&#x27;: Failed to connect to github.com port 443 after 21066 ms: Could not connect to server</span><br></pre></td></tr></table></figure></div>\n\n<p>此类问题下最好是通过<strong>使用代理</strong>，在使用此方法前，首先请确保你已安装如上提到的软件，如：Clash、V2rayNG 等。</p>\n<p>不同的软件，对应使用的端口也不相同，具体如下：</p>\n<p><strong>1、Clash 小猫咪</strong></p>\n<p>通过其默认端口 <code>7890</code> 以直接配置如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy 127.0.0.1:7890</span><br><span class=\"line\">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>2、V2rayNG</strong></p>\n<p>关于此软件，需要打开软件主界面，在如下图所指示的地址就是配置代理的选项，</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0901/3.jpg\"\n                      alt=\"新版 UI\"\n                ></p>\n\n  <div class=\"note p-4 mb-4 rounded-small yellow icon-padding\">\n    <i class=\"note-icon fa-solid fa-circle-exclamation\"></i><p><strong>注意：</strong></p>\n<p>V2rayN 的 UI 版本不同，如果使用的是旧版本的 V2rayN，则为如下图所指示：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0901/2.jpg\"\n                      alt=\"旧版 UI\"\n                ></p>\n\n  </div>\n\n<p>这里就按照 Http 所提供的端口 <code>10809</code> 进行配置即可：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy 127.0.0.1:10809</span><br><span class=\"line\">git config --global https.proxy 127.0.0.1:10809</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"2-2-Git-中的-Github-邮箱与密码\"><a href=\"#2-2-Git-中的-Github-邮箱与密码\" class=\"headerlink\" title=\"2.2 Git 中的 Github 邮箱与密码\"></a>2.2 Git 中的 Github 邮箱与密码</h2><p>假如你需要在 Github 中克隆一个私有的项目仓库或推送项目仓库时，往往会出现如下情况：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Username for &#x27;https://github.com&#x27;:</span><br><span class=\"line\">Password for &#x27;https://username@github.com&#x27;:</span><br></pre></td></tr></table></figure></div>\n\n<p>此类情况下，你需要输入<strong>对应的用户名和对应的 Token</strong> 才能继续操作。关于 Token 的获取，请看下文。</p>\n<ol>\n<li><p>首先点击此链接 <a class=\"link\"   href=\"https://github.com/settings/tokens/new\" >New Personal Access Token (Classic) (github.com)<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n<li><p>根据如下图所示操作：<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0424/1.jpg\"\n                     \n                ></p>\n</li>\n<li><p>完成后点击最下方的绿色按钮【Generate token】，这将会生成一个随机的 token，如下图：<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0424/2.jpg\"\n                     \n                ></p>\n<p>上图中的绿色框为所需要的 Token​。</p>\n\n  <div class=\"note p-4 mb-4 rounded-small danger icon-padding\">\n    <i class=\"note-icon fa-solid fa-solid fa-circle-info\"></i><p><strong>需要注意：</strong></p>\n<p>​\t每次仅会显示一次完整的 Token，下一次刷新页面后将会完全隐藏，建议生成后做好备份！</p>\n\n  </div></li>\n</ol>\n<h1 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h1><p>本篇内容仅是本人在 Github 上的常见问题，如果遇到其它问题或者有更好的解决方案，欢迎在评论区下留言！</p>\n",
            "tags": [
                "新手向",
                "Git",
                "Github",
                "答疑解惑"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/05/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%94%A8%E6%89%8B%E6%9C%BA%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/",
            "url": "https://catisnotfound.github.io/2024/05/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%94%A8%E6%89%8B%E6%9C%BA%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/",
            "title": "搭建个人博客（三）：用 Android 手机更新 Hexo 博客",
            "date_published": "2024-05-27T02:18:00.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现如今，Hexo 博客已经成为一个非常流行的博客框架，但是 Hexo 博客的更新通常需要通过命令行操作，对于不擅长命令行操作的小白来说，更新博客就显得十分麻烦。本文将介绍仅适用于 Android 的软件，帮助你在手机上轻松地更新 Hexo 博客。</p>\n<h1 id=\"备份博客存档\"><a href=\"#备份博客存档\" class=\"headerlink\" title=\"备份博客存档\"></a>备份博客存档</h1><p>首先，在利用手机之前，首先就是在自己的电脑上<strong>备份自己的博客</strong>。</p>\n<p>（PS: 如果不是在电脑上写 Hexo 博客，请当博主没说~ o(*￣▽￣*)o）</p>\n<p>在此，请直接在 Github 上<a href=\"https://github.com/new\"><strong>新建一个公共仓库（Public Repository）</strong></a>，将自己的博客上传到 Github 中。</p>\n<p>假设：你已在 Github 上新建了一个名为 <code>blogBackup</code> 的公共仓库，那么你应当在命令行下，执行如下命令：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;20210412&quot;</span> <span class=\"comment\"># 此处建议填写上传时间，如：20210412&quot;</span></span><br><span class=\"line\">git remote add origin https://github.com/yourname/blogBackup.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：请将第4行中的 Git 仓库地址替换自己实际的 Github 仓库地址。</strong></p>\n<p>当你完成以上这些命令后，请回到你新建好的 Github 公共仓库以确认上传成功。</p>\n<h1 id=\"WeBlog\"><a href=\"#WeBlog\" class=\"headerlink\" title=\"WeBlog\"></a>WeBlog</h1>\n  <div class=\"note-large blue\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-book\"></i><p>软件简介</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>WeBlog 是一个运行在安卓的静态博客编写器，他提供从编写，构建到预览预览博客的能力，同时包含GIT，终端，自定义 Shell 脚本等功能。 新建文章，标签管理，现代化的UI，可以提供更好博客编写的体验。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0527/banner.jpg\"\n                     \n                ></p>\n\n    </div>\n  </div>\n\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p><strong>注意：WeBlog 目前仅支持 Android 系统</strong></p>\n<p>请直接点击下面链接，选择 Arm64 架构的安装包下载并安装。</p>\n<a class=\"button  center large\" href='https://github.com/PangBaiWork/WeBlog/releases' title='点击这里下载软件'><i class='fa-brands fa-github'></i> 点击这里下载软件</a>\n\n<h2 id=\"导入博客\"><a href=\"#导入博客\" class=\"headerlink\" title=\"导入博客\"></a>导入博客</h2><p>打开 WeBlog 后，<strong>请务必安装 Hexo 框架及外部存储权限申请</strong>。</p>\n<p>在主页上点击 <code>拉取项目</code>，输入你的 Github 上的仓库地址。</p>\n\n  <div class=\"note-large red\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-circle-info\"></i><p>注意</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>这里并非填你的 Github Pages 仓库地址，而是填写你的<strong>备份博客的仓库地址</strong> （类似于：<code>https://github.com/yourname/blogBackup.git</code>，否则无法识别到 Hexo 博客项目。</p>\n\n    </div>\n  </div>\n\n<p>接着，在选择文件夹时，<strong>请一定要新建一个空的文件夹</strong>，否则无法拉取 Github 仓库项目。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0527/1.jpg\"\n                     \n                ></p>\n<p>最后，请耐心等待加载，一般需要几分钟才能完成克隆。</p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p><strong>1. 定位你的博客文章目录</strong></p>\n<p>在写博客之前，若需要找到你之前所写的文章，请直接打开你的项目源目录，依次点击 <code>source</code> → <code>_posts</code> 文件夹，在此目录下，你将看到你之前所写的所有博客文章。</p>\n<p><strong>2. 新建博客文章</strong></p>\n<p>点击右下角的 <code>+</code> 号，按照提示填写文章基本信息即可完成创建。</p>\n<p>或者直接在终端下执行如下命令：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0527/2.jpg\"\n                     \n                ></p>\n<p><strong>3. 尽情写作吧！</strong></p>\n<h2 id=\"好用的脚本文件\"><a href=\"#好用的脚本文件\" class=\"headerlink\" title=\"好用的脚本文件\"></a>好用的脚本文件</h2><p>为了方便编辑或更新博客，请根据自己的需求，在项目源目录的 <code>.scripts</code> 文件夹下添加 Shell 脚本，以便减少不必要的操作。</p>\n<ul>\n<li><code>update-to-github-pages.sh</code>：用于将本地博客更新到 Github Pages 仓库。</li>\n</ul>\n<p>注意：这将会一次性将博客的所有文件上传到 Github Pages 仓库，并覆盖掉原有的文件。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>backup-your-blog.sh</code>：用于将博客存档上传到 Github 仓库中。</li>\n</ul>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\"># 这将会自动生成当前日期作为备份的备注。如：20210412</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;<span class=\"subst\">$(date +%Y%m%d)</span>&quot;</span> </span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>setup-your-git.sh</code>：用于配置 Git 全局参数。<strong>（建议导入博客后，执行一次）</strong></li>\n</ul>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail@gmail.com&quot;</span></span><br><span class=\"line\">git config --global --add safe.directory <span class=\"variable\">$PWD</span></span><br></pre></td></tr></table></figure></div>\n\n<p>这里需要修改 <code>yourname</code> 和 <code>youremail@gmail.com</code> 为你的实际用户名和邮箱。</p>\n<p>当你不确定是否配置成功时，可以尝试在终端下单独执行如下命令查看参数是否生效。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name</span><br><span class=\"line\">git config --global user.email</span><br><span class=\"line\">git config --global safe.directory</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><div class=\"tabs\" id=\"tab-question_answer\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a class=\"#question_answer-1\">💡 常见问题一</a></li><li class=\"tab\"><a class=\"#question_answer-2\">💡 常见问题二</a></li><li class=\"tab\"><a class=\"#question_answer-3\">💡 常见问题三</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"question_answer-1\"><p>Q：为什么拉取项目后，打开自建的文件夹仍是空的？</p>\n<p>A：请检查你的远程 Github 仓库是否为私人仓库，若为私人仓库（Private），请将该仓库转换为公共仓库（Public）。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0513/6.jpg\"\n                     \n                ></p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0513/7.jpg\"\n                     \n                ></p></div><div class=\"tab-pane\" id=\"question_answer-2\"><p>Q：当我拉取完项目后，为什么提示找不到 Hexo 框架？</p>\n<p>即使用【实时预览】时，直接出现 <code>The LivePreview is ended.</code> 提示。</p>\n<p>A：在解决此问题前，请先查看你的项目源目录下是否有 <code>node_modules</code> 目录。一般情况下，当你备份博客存档时，<code>node_modules</code> 目录往往不会被上传到 Github 仓库。</p>\n<p>请直接从底部界面向上滑动，打开终端，并执行 <code>npm install</code> 命令，等待安装依赖即可。</p></div><div class=\"tab-pane\" id=\"question_answer-3\"><p>Q：执行 <code>npm install</code> 命令时报错？</p>\n<p>A：在确认此问题前，请按照如下方式排查：</p>\n<p>方法一：检查你的项目源目录是否有 <code>package.json</code> 文件。</p>\n<p>若你的项目源目录下没有 <code>package.json</code> 文件，则需要执行 <code>npm init</code> 命令，并按照提示输入相关信息。</p>\n<p>方法二：将 <code>node_modules</code> 目录复制到你的项目目录中。</p>\n<p>为了方便操作，这里作者建议：直接在你的项目源目录下新建一个 <code>install.sh</code> 文件并编辑，</p>\n<p>这里假设你的 Github 仓库名为 <code>blogBackup</code>，<strong>注意替换自己的 Github 仓库地址。</strong></p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># install.sh</span></span><br><span class=\"line\"><span class=\"comment\"># 一次性执行脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 可直接克隆博客存档到本地项目中</span></span><br><span class=\"line\"><span class=\"comment\"># 用于解决无法安装 Hexo 依赖问题</span></span><br><span class=\"line\">BLOG_DIR=<span class=\"variable\">$PWD</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d ~/blogBackup ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在克隆……&quot;</span></span><br><span class=\"line\">    git <span class=\"built_in\">clone</span> https://github.com/yourname/blogBackup.git <span class=\"comment\"># 此处需替换为你的 Github 仓库地址</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> blogBackup</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在合并……&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> blogBackup</span><br><span class=\"line\">    git pull</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;❌ 无法拉取仓库！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 255</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [  ! -d node_modules ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在安装依赖....&quot;</span></span><br><span class=\"line\">    npm install</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;❌ 下载/安装依赖失败！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 255</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r node_modules <span class=\"variable\">$BLOG_DIR</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意：</span></span><br><span class=\"line\"><span class=\"comment\"># 其中的第10行的git仓库地址替换为实际的仓库地址。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若需要调试于终端之上，请执行：</span></span><br><span class=\"line\"><span class=\"comment\"># bash ./.scripts/install.sh</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/0527/3.jpg\"\n                     \n                ></p>\n<p>完成脚本执行后，执行 <code>npm list</code> 查看是否包含 <code>hexo</code> 依赖即可。</p></div></div></div>\n\n<hr>\n<p>以上是本篇文章的全部内容，若在使用过程中遇到问题，请在评论区留言。</p>\n",
            "tags": [
                "博客搭建",
                "软件安利",
                "Git",
                "Github",
                "Hexo",
                "Android"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/04/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BD%BF%E7%94%A8-Git%EF%BC%9F/",
            "url": "https://catisnotfound.github.io/2024/04/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BD%BF%E7%94%A8-Git%EF%BC%9F/",
            "title": "如何在命令行下使用 Git？",
            "date_published": "2024-04-23T11:09:08.000Z",
            "content_html": "<p>Git，作为一款强大的分布式版本控制系统，为代码协作与版本追踪提供了坚实的基础。针对不熟悉命令行操作的菜鸟，本文将简要介绍如何在命令行下利用 Git 进行简单操作。</p>\n<h2 id=\"下载-Git\"><a href=\"#下载-Git\" class=\"headerlink\" title=\"下载 Git\"></a>下载 Git</h2><p>首先，需要先下载 Git，对于不同的操作系统，安装方式各有不同，具体如下：</p>\n<ul>\n<li><p>Linux: 根据不同的发行版，在终端中输入对应的安装命令即可</p>\n<div class=\"tabs\" id=\"tab-install_git\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a class=\"#install_git-1\">Debian(Ubuntu)</a></li><li class=\"tab\"><a class=\"#install_git-2\">Arch Linux</a></li><li class=\"tab\"><a class=\"#install_git-3\">Fedora(Redhat)</a></li><li class=\"tab\"><a class=\"#install_git-4\">CentOS(7.9及以下)</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"install_git-1\"><div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git -y</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-2\"><div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Sy git </span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-3\"><div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dnf install git -y</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-4\"><div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git -y</span><br></pre></td></tr></table></figure></div></div></div></div>\n</li>\n<li><p>Windows &#x2F; MacOS: <a class=\"link\"   href=\"https://git-scm.com/downloads\" >https://git-scm.com/downloads<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n</li>\n</ul>\n<p>要检查 Git 安装是否完成，只需执行命令：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"简单使用-Git\"><a href=\"#简单使用-Git\" class=\"headerlink\" title=\"简单使用 Git\"></a>简单使用 Git</h2><p>关于此处，你可以直接通过如下图进行速查：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg\"\n                      alt=\"Git 常用命令速查表\"\n                ></p>\n<p>以下是较为常用的 Git 命令：</p>\n<p>首先最为简单的事，就是从 Github 等其它代码托管平台上<strong>克隆项目</strong></p>\n<p>克隆源代码项目：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> [远程仓库地址]</span><br></pre></td></tr></table></figure></div>\n\n<p>安装完成后，首先第一件事：就是需要先配置用户和邮箱。</p>\n<p>配置用户：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [你的名字]</span><br></pre></td></tr></table></figure></div>\n\n<p>配置邮箱：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email [你的邮箱]</span><br></pre></td></tr></table></figure></div>\n\n<p>要初始化一个自己的 Git 项目，执行如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [你的项目名]</span><br></pre></td></tr></table></figure></div>\n\n<p>当然，你也可以选择在当前目录下初始化你的 Git，只需执行：<code>git init</code></p>\n<p>将文件添加到分支中：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add [指定的文件或目录]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>这里的 <code>*</code> , <code>.</code> 都代表当前目录下所有需要添加或修改的文件</p>\n</blockquote>\n<p>将文件从分支中删除：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> -r [指定目录]        <span class=\"comment\"># 删除目录及其所有子文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> [指定文件或目录]     <span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r *                <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></div>\n\n<p>查看所有已添加到分支里的文件</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files</span><br></pre></td></tr></table></figure></div>\n\n<p>为分支里的文件进行提交（commit：提交时需要用到的标记）：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;[内容]&#x27;</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;[内容]&#x27;</span>  <span class=\"comment\"># 添加并提交</span></span><br><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;[内容]&#x27;</span> <span class=\"comment\"># 反复修改并提交 </span></span><br></pre></td></tr></table></figure></div>\n\n<p>查看当前的分支状态：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></div>\n\n<p>关于分支（branch）：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show-branch     <span class=\"comment\"># 查看当前分支历史</span></span><br><span class=\"line\">git show-branch -a  <span class=\"comment\"># 查看当前分支的所有历史</span></span><br><span class=\"line\">git branch          <span class=\"comment\"># 查看当前存在的分支</span></span><br><span class=\"line\">git branch -a       <span class=\"comment\"># 查看所有存在的分支</span></span><br><span class=\"line\">git branch -M main  <span class=\"comment\"># 新建一个 main 分支</span></span><br><span class=\"line\">git branch -m main main_copy <span class=\"comment\"># 将 main 分支改名为 main_copy</span></span><br></pre></td></tr></table></figure></div>\n\n<p>添加远程仓库（Github、Gitlab、Gitee……）：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [远程仓库地址]</span><br></pre></td></tr></table></figure></div>\n\n<p>上传&#x2F;推流到远程仓库：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master   <span class=\"comment\"># 将本地分支推流到远程分支</span></span><br></pre></td></tr></table></figure></div>\n\n<p>从远程仓库中获取&#x2F;合并到本地分支：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master  <span class=\"comment\"># 获取远程分支master并merge到本地分支</span></span><br><span class=\"line\">git merge origin/master     <span class=\"comment\"># 从远程分支中合并到本地分支</span></span><br></pre></td></tr></table></figure></div>\n\n<p>更多进阶的命令，可以查看 <a class=\"link\"   href=\"https://www.runoob.com/note/56524\" >Git 常用命令大全<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>，内容更加详细(*^_^*)。</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8-Github-Page-%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://catisnotfound.github.io/2024/04/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8-Github-Page-%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "搭建个人博客（一）：如何在 Github Page 上搭建我的个人博客",
            "date_published": "2024-04-23T11:08:53.000Z",
            "content_html": "<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>如上标题，现在可以拥有属于自己的个人博客了 ~（＾▽＾）~ ，</p>\n<p>关于个人博客，可以利用 Github Page 来搭建自己的个人博客。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/5.jpg\"\n                     \n                ></p>\n<h2 id=\"怎么做？\"><a href=\"#怎么做？\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><h3 id=\"1-注册-Github\"><a href=\"#1-注册-Github\" class=\"headerlink\" title=\"1. 注册 Github\"></a>1. 注册 Github</h3><p>既然提到了 Github Page ，首先就得<a class=\"link\"   href=\"https://github.com/signup\" >注册自己的 Github 账号<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>。</p>\n<blockquote>\n<p>如果 Github 界面打不开，建议使用 <a class=\"link\"   href=\"https://steampp.net/\" >Watt Toolkit<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>😃，（不仅可以加速 Steam、橙子、育碧，同时也能加速 Github）</p>\n<p>注册一个 Github 账号只需要邮箱，并且进行邮箱验证就能快速完成！ヾ(•ω•&#96;)o</p>\n</blockquote>\n<h3 id=\"2-创建自己的仓库\"><a href=\"#2-创建自己的仓库\" class=\"headerlink\" title=\"2. 创建自己的仓库\"></a>2. 创建自己的仓库</h3><p>注册之后，接下来就要创建自己的仓库，<br>首先点击【New】，如下图：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/1.jpg\"\n                      alt=\"1.jpg\"\n                ></p>\n<p>其次，创建仓库时，<strong>仓库名一定要以<code>[你的用户名].github.io</code> 为名，</strong> 默认下都会将其设为 Github Page，之后就能完成创建。具体看下图：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/2.jpg\"\n                      alt=\"2.jpg\"\n                ></p>\n<p>创建完成之后，点击进入你的仓库项目，依次点击【Settings】→ 【Pages】→【Deploy from a branch】，并选择【Github Action】（作此步是方便为了后期可以更换框架来改善自己的博客网页）<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/2.1.jpg\"\n                      alt=\"2.1.jpg\"\n                ></p>\n<h3 id=\"3-选择框架\"><a href=\"#3-选择框架\" class=\"headerlink\" title=\"3. 选择框架\"></a>3. 选择框架</h3><p>当你做完上述步骤后，你可以直接访问自己的网页，如下图：<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/3.0.jpg\"\n                      alt=\"3.0.jpg\"\n                ></p>\n<p>接下来就是选择网页框架。这里就以 Hexo 为例，这里就只需要用到 <code>git</code> 和 <code>node.js</code> 两个依赖软件了，关于详细地安装步骤，请直接参照<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a>即可</p>\n<p>完成后的搭建，大概是长这样的：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/3.jpg\"\n                      alt=\"3.jpg\"\n                ></p>\n<p>当然，这还不够，你还可以给它更换一个更好看的主题，这里作者就用了 Redefine 主题，大概就是长这样的(*^_^*)：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/4.jpg\"\n                      alt=\"4.jpg\"\n                ></p>\n\n  <div class=\"note-large blue\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-lightbulb\"></i><p>跳转提示</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>关于怎么配置这个主题，</p>\n<p>请跳转到：<a href=\"../../24/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE-Hexo-%E4%BD%BF%E7%94%A8-Rendefine-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2\">【搭建个人博客（二）：如何详细配置 Hexo 使用 Rendefine 主题美化博客】</a></p>\n\n    </div>\n  </div>\n\n<p>最后简单的做个配置，最终呈现了这样的效果：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2024/042301/5.jpg\"\n                      alt=\"5.jpg\"\n                ></p>\n<h3 id=\"4-上传到-Github\"><a href=\"#4-上传到-Github\" class=\"headerlink\" title=\"4. 上传到 Github\"></a>4. 上传到 Github</h3><p>接下来，将本地上制作好的内容上传到 Github 仓库中。关于怎么上传部署 Github Pages，<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/github-pages\" >请点击查看关于 Hexo 上传部署到 Github Pages 的教程<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></p>\n<p>首次执行，需要下列的所有命令：</p>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [你的Github仓库地址]</span><br><span class=\"line\">cp -r [你的博客名称]/* [Github仓库名称] # 注意两个路径之间留下至少一个空格</span><br><span class=\"line\">cd [Github仓库名称]</span><br><span class=\"line\">git config --global user.name &quot;[你的Github昵称]&quot;</span><br><span class=\"line\">git config --global user.email &quot;[你注册 Github 时所用的邮箱]&quot;</span><br><span class=\"line\">git remote add origin [你的Github仓库地址]</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;这里随便写点什么&quot; # 此行指令可不写</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></div>\n\n<p>等待上传完成即可(*^_^*)</p>\n<hr>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>下一篇将继续详细【<a href=\"../../24/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE-Hexo-%E4%BD%BF%E7%94%A8-Rendefine-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2\">配置 Hexo，以及如何使用 Redefine 主题美化博客</a>】</p>\n<p>本篇文章中部分没有提到的内容，下一篇也将会详细介绍(*^_^*)</p>\n",
            "tags": [
                "博客搭建",
                "Git",
                "Github",
                "Hexo"
            ]
        }
    ]
}