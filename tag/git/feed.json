{
    "version": "https://jsonfeed.org/version/1",
    "title": "CatIsNotFound • All posts by \"git\" tag",
    "description": "一个基于 Hexo 框架的个人博客网站",
    "home_page_url": "https://CatIsNotFound.github.io",
    "items": [
        {
            "id": "https://catisnotfound.github.io/2024/05/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%94%A8%E6%89%8B%E6%9C%BA%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/",
            "url": "https://catisnotfound.github.io/2024/05/27/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E7%94%A8%E6%89%8B%E6%9C%BA%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/",
            "title": "搭建个人博客（三）：用 Android 手机更新 Hexo 博客",
            "date_published": "2024-05-27T02:18:00.000Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>现如今，Hexo 博客已经成为一个非常流行的博客框架，但是 Hexo 博客的更新通常需要通过命令行操作，对于不擅长命令行操作的小白来说，更新博客就显得十分麻烦。本文将介绍仅适用于 Android 的软件，帮助你在手机上轻松地更新 Hexo 博客。</p>\n<h1 id=\"备份博客存档\"><a href=\"#备份博客存档\" class=\"headerlink\" title=\"备份博客存档\"></a>备份博客存档</h1><p>首先，在利用手机之前，首先就是在自己的电脑上<strong>备份自己的博客</strong>。</p>\n<p>（PS: 如果不是在电脑上写 Hexo 博客，请当博主没说~ o(*￣▽￣*)o）</p>\n<p>在此，请直接在 Github 上<a href=\"https://github.com/new\"><strong>新建一个公共仓库（Public Repository）</strong></a>，将自己的博客上传到 Github 中。</p>\n<p>假设：你已在 Github 上新建了一个名为 <code>blogBackup</code> 的公共仓库，那么你应当在命令行下，执行如下命令：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;20210412&quot;</span> <span class=\"comment\"># 此处建议填写上传时间，如：20210412&quot;</span></span><br><span class=\"line\">git remote add origin https://github.com/yourname/blogBackup.git</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：请将第4行中的 Git 仓库地址替换自己实际的 Github 仓库地址。</strong></p>\n<p>当你完成以上这些命令后，请回到你新建好的 Github 公共仓库以确认上传成功。</p>\n<h1 id=\"WeBlog\"><a href=\"#WeBlog\" class=\"headerlink\" title=\"WeBlog\"></a>WeBlog</h1>\n  <div class=\"note-large blue\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-book\"></i><p>软件简介</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>WeBlog 是一个运行在安卓的静态博客编写器，他提供从编写，构建到预览预览博客的能力，同时包含GIT，终端，自定义 Shell 脚本等功能。 新建文章，标签管理，现代化的UI，可以提供更好博客编写的体验。</p>\n<p><img loading=\"lazy\" src=\"/images/2024/0527/banner.jpg\"></p>\n\n    </div>\n  </div>\n\n<h2 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h2><p><strong>注意：WeBlog 目前仅支持 Android 系统</strong></p>\n<p>请直接点击下面链接，选择 Arm64 架构的安装包下载并安装。</p>\n<a class=\"button  center large\" href='https://github.com/PangBaiWork/WeBlog/releases' title='点击这里下载软件'><i class='fa-brands fa-github'></i> 点击这里下载软件</a>\n\n<h2 id=\"导入博客\"><a href=\"#导入博客\" class=\"headerlink\" title=\"导入博客\"></a>导入博客</h2><p>打开 WeBlog 后，<strong>请务必安装 Hexo 框架及外部存储权限申请</strong>。</p>\n<p>在主页上点击 <code>拉取项目</code>，输入你的 Github 上的仓库地址。</p>\n\n  <div class=\"note-large red\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-circle-info\"></i><p>注意</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>这里并非填你的 Github Pages 仓库地址，而是填写你的<strong>备份博客的仓库地址</strong> （类似于：<code>https://github.com/yourname/blogBackup.git</code>，否则无法识别到 Hexo 博客项目。</p>\n\n    </div>\n  </div>\n\n<p>接着，在选择文件夹时，<strong>请一定要新建一个空的文件夹</strong>，否则无法拉取 Github 仓库项目。</p>\n<p><img loading=\"lazy\" src=\"/images/2024/0527/1.jpg\"></p>\n<p>最后，请耐心等待加载，一般需要几分钟才能完成克隆。</p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p><strong>1. 定位你的博客文章目录</strong></p>\n<p>在写博客之前，若需要找到你之前所写的文章，请直接打开你的项目源目录，依次点击 <code>source</code> → <code>_posts</code> 文件夹，在此目录下，你将看到你之前所写的所有博客文章。</p>\n<p><strong>2. 新建博客文章</strong></p>\n<p>点击右下角的 <code>+</code> 号，按照提示填写文章基本信息即可完成创建。</p>\n<p>或者直接在终端下执行如下命令：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img loading=\"lazy\" src=\"/images/2024/0527/2.jpg\"></p>\n<p><strong>3. 尽情写作吧！</strong></p>\n<h2 id=\"好用的脚本文件\"><a href=\"#好用的脚本文件\" class=\"headerlink\" title=\"好用的脚本文件\"></a>好用的脚本文件</h2><p>为了方便编辑或更新博客，请根据自己的需求，在项目源目录的 <code>.scripts</code> 文件夹下添加 Shell 脚本，以便减少不必要的操作。</p>\n<ul>\n<li><code>update-to-github-pages.sh</code>：用于将本地博客更新到 Github Pages 仓库。</li>\n</ul>\n<p>注意：这将会一次性将博客的所有文件上传到 Github Pages 仓库，并覆盖掉原有的文件。</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>backup-your-blog.sh</code>：用于将博客存档上传到 Github 仓库中。</li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\"><span class=\"comment\"># 这将会自动生成当前日期作为备份的备注。如：20210412</span></span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;<span class=\"subst\">$(date +%Y%m%d)</span>&quot;</span> </span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li><code>setup-your-git.sh</code>：用于配置 Git 全局参数。<strong>（建议导入博客后，执行一次）</strong></li>\n</ul>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">git config --global user.name <span class=\"string\">&quot;yourname&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;youremail@gmail.com&quot;</span></span><br><span class=\"line\">git config --global --add safe.directory <span class=\"variable\">$PWD</span></span><br></pre></td></tr></table></figure></div>\n\n<p>这里需要修改 <code>yourname</code> 和 <code>youremail@gmail.com</code> 为你的实际用户名和邮箱。</p>\n<p>当你不确定是否配置成功时，可以尝试在终端下单独执行如下命令查看参数是否生效。</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name</span><br><span class=\"line\">git config --global user.email</span><br><span class=\"line\">git config --global safe.directory</span><br></pre></td></tr></table></figure></div>\n\n<hr>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><div class=\"tabs\" id=\"tab-question_answer\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a class=\"#question_answer-1\">💡 常见问题一</a></li><li class=\"tab\"><a class=\"#question_answer-2\">💡 常见问题二</a></li><li class=\"tab\"><a class=\"#question_answer-3\">💡 常见问题三</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"question_answer-1\"><p>Q：为什么拉取项目后，打开自建的文件夹仍是空的？</p>\n<p>A：请检查你的远程 Github 仓库是否为私人仓库，若为私人仓库（Private），请将该仓库转换为公共仓库（Public）。</p>\n<p><img loading=\"lazy\" src=\"/images/2024/0513/6.jpg\"></p>\n<p><img loading=\"lazy\" src=\"/images/2024/0513/7.jpg\"></p></div><div class=\"tab-pane\" id=\"question_answer-2\"><p>Q：当我拉取完项目后，为什么提示找不到 Hexo 框架？</p>\n<p>即使用【实时预览】时，直接出现 <code>The LivePreview is ended.</code> 提示。</p>\n<p>A：在解决此问题前，请先查看你的项目源目录下是否有 <code>node_modules</code> 目录。一般情况下，当你备份博客存档时，<code>node_modules</code> 目录往往不会被上传到 Github 仓库。</p>\n<p>请直接从底部界面向上滑动，打开终端，并执行 <code>npm install</code> 命令，等待安装依赖即可。</p></div><div class=\"tab-pane\" id=\"question_answer-3\"><p>Q：执行 <code>npm install</code> 命令时报错？</p>\n<p>A：在确认此问题前，请按照如下方式排查：</p>\n<p>方法一：检查你的项目源目录是否有 <code>package.json</code> 文件。</p>\n<p>若你的项目源目录下没有 <code>package.json</code> 文件，则需要执行 <code>npm init</code> 命令，并按照提示输入相关信息。</p>\n<p>方法二：将 <code>node_modules</code> 目录复制到你的项目目录中。</p>\n<p>为了方便操作，这里作者建议：直接在你的项目源目录下新建一个 <code>install.sh</code> 文件并编辑，</p>\n<p>这里假设你的 Github 仓库名为 <code>blogBackup</code>，<strong>注意替换自己的 Github 仓库地址。</strong></p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># install.sh</span></span><br><span class=\"line\"><span class=\"comment\"># 一次性执行脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 可直接克隆博客存档到本地项目中</span></span><br><span class=\"line\"><span class=\"comment\"># 用于解决无法安装 Hexo 依赖问题</span></span><br><span class=\"line\">BLOG_DIR=<span class=\"variable\">$PWD</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -d ~/blogBackup ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在克隆……&quot;</span></span><br><span class=\"line\">    git <span class=\"built_in\">clone</span> https://github.com/yourname/blogBackup.git <span class=\"comment\"># 此处需替换为你的 Github 仓库地址</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> blogBackup</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在合并……&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> blogBackup</span><br><span class=\"line\">    git pull</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;❌ 无法拉取仓库！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 255</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [  ! -d node_modules ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;→ 正在安装依赖....&quot;</span></span><br><span class=\"line\">    npm install</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ $? -ne 0 ];<span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">&quot;❌ 下载/安装依赖失败！&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span> 255</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -r node_modules <span class=\"variable\">$BLOG_DIR</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 注意：</span></span><br><span class=\"line\"><span class=\"comment\"># 其中的第10行的git仓库地址替换为实际的仓库地址。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若需要调试于终端之上，请执行：</span></span><br><span class=\"line\"><span class=\"comment\"># bash ./.scripts/install.sh</span></span><br></pre></td></tr></table></figure></div>\n\n<p><img loading=\"lazy\" src=\"/images/2024/0527/3.jpg\"></p>\n<p>完成脚本执行后，执行 <code>npm list</code> 查看是否包含 <code>hexo</code> 依赖即可。</p></div></div></div>\n\n<hr>\n<p>以上是本篇文章的全部内容，若在使用过程中遇到问题，请在评论区留言。</p>\n",
            "tags": [
                "Android",
                "博客搭建",
                "Git",
                "Hexo",
                "软件安利"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/04/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BD%BF%E7%94%A8-Git%EF%BC%9F/",
            "url": "https://catisnotfound.github.io/2024/04/23/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E4%BD%BF%E7%94%A8-Git%EF%BC%9F/",
            "title": "如何在命令行下使用 Git？",
            "date_published": "2024-04-23T11:09:08.000Z",
            "content_html": "<p>Git，作为一款强大的分布式版本控制系统，为代码协作与版本追踪提供了坚实的基础。针对不熟悉命令行操作的菜鸟，本文将简要介绍如何在命令行下利用 Git 进行简单操作。</p>\n<h2 id=\"下载-Git\"><a href=\"#下载-Git\" class=\"headerlink\" title=\"下载 Git\"></a>下载 Git</h2><p>首先，需要先下载 Git，对于不同的操作系统，安装方式各有不同，具体如下：</p>\n<ul>\n<li><p>Linux: 根据不同的发行版，在终端中输入对应的安装命令即可</p>\n<div class=\"tabs\" id=\"tab-install_git\"><ul class=\"nav-tabs\"><li class=\"tab active\"><a class=\"#install_git-1\">Debian(Ubuntu)</a></li><li class=\"tab\"><a class=\"#install_git-2\">Arch Linux</a></li><li class=\"tab\"><a class=\"#install_git-3\">Fedora(Redhat)</a></li><li class=\"tab\"><a class=\"#install_git-4\">CentOS(7.9及以下)</a></li></ul><div class=\"tab-content\"><div class=\"tab-pane active\" id=\"install_git-1\"><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install git -y</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-2\"><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Sy git </span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-3\"><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dnf install git -y</span><br></pre></td></tr></table></figure></div></div><div class=\"tab-pane\" id=\"install_git-4\"><div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install git -y</span><br></pre></td></tr></table></figure></div></div></div></div>\n</li>\n<li><p>Windows &#x2F; MacOS: <a class=\"link\"   href=\"https://git-scm.com/downloads\" >https://git-scm.com/downloads <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</li>\n</ul>\n<p>要检查 Git 安装是否完成，只需执行命令：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git --version</span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"简单使用-Git\"><a href=\"#简单使用-Git\" class=\"headerlink\" title=\"简单使用 Git\"></a>简单使用 Git</h2><p>关于此处，你可以直接通过如下图进行速查：</p>\n<p><img loading=\"lazy\" src=\"https://www.runoob.com/wp-content/uploads/2015/02/011500266295799.jpg\" alt=\"Git 常用命令速查表\"></p>\n<p>以下是较为常用的 Git 命令：</p>\n<p>首先最为简单的事，就是从 Github 等其它代码托管平台上<strong>克隆项目</strong></p>\n<p>克隆源代码项目：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> [远程仓库地址]</span><br></pre></td></tr></table></figure></div>\n\n<p>安装完成后，首先第一件事：就是需要先配置用户和邮箱。</p>\n<p>配置用户：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name [你的名字]</span><br></pre></td></tr></table></figure></div>\n\n<p>配置邮箱：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email [你的邮箱]</span><br></pre></td></tr></table></figure></div>\n\n<p>要初始化一个自己的 Git 项目，执行如下：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init [你的项目名]</span><br></pre></td></tr></table></figure></div>\n\n<p>当然，你也可以选择在当前目录下初始化你的 Git，只需执行：<code>git init</code></p>\n<p>将文件添加到分支中：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add *</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git add [指定的文件或目录]</span><br></pre></td></tr></table></figure></div>\n\n<blockquote>\n<p>这里的 <code>*</code> , <code>.</code> 都代表当前目录下所有需要添加或修改的文件</p>\n</blockquote>\n<p>将文件从分支中删除：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> -r [指定目录]        <span class=\"comment\"># 删除目录及其所有子文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> [指定文件或目录]     <span class=\"comment\"># 删除文件</span></span><br><span class=\"line\">git <span class=\"built_in\">rm</span> -r *                <span class=\"comment\"># 删除所有</span></span><br></pre></td></tr></table></figure></div>\n\n<p>查看所有已添加到分支里的文件</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files</span><br></pre></td></tr></table></figure></div>\n\n<p>为分支里的文件进行提交（commit：提交时需要用到的标记）：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">&#x27;[内容]&#x27;</span></span><br><span class=\"line\">git commit -am <span class=\"string\">&#x27;[内容]&#x27;</span>  <span class=\"comment\"># 添加并提交</span></span><br><span class=\"line\">git commit --amend -m <span class=\"string\">&#x27;[内容]&#x27;</span> <span class=\"comment\"># 反复修改并提交 </span></span><br></pre></td></tr></table></figure></div>\n\n<p>查看当前的分支状态：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></div>\n\n<p>关于分支（branch）：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show-branch     <span class=\"comment\"># 查看当前分支历史</span></span><br><span class=\"line\">git show-branch -a  <span class=\"comment\"># 查看当前分支的所有历史</span></span><br><span class=\"line\">git branch          <span class=\"comment\"># 查看当前存在的分支</span></span><br><span class=\"line\">git branch -a       <span class=\"comment\"># 查看所有存在的分支</span></span><br><span class=\"line\">git branch -M main  <span class=\"comment\"># 新建一个 main 分支</span></span><br><span class=\"line\">git branch -m main main_copy <span class=\"comment\"># 将 main 分支改名为 main_copy</span></span><br></pre></td></tr></table></figure></div>\n\n<p>添加远程仓库（Github、Gitlab、Gitee……）：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin [远程仓库地址]</span><br></pre></td></tr></table></figure></div>\n\n<p>上传&#x2F;推流到远程仓库：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master   <span class=\"comment\"># 将本地分支推流到远程分支</span></span><br></pre></td></tr></table></figure></div>\n\n<p>从远程仓库中获取&#x2F;合并到本地分支：</p>\n<div class=\"highlight-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master  <span class=\"comment\"># 获取远程分支master并merge到本地分支</span></span><br><span class=\"line\">git merge origin/master     <span class=\"comment\"># 从远程分支中合并到本地分支</span></span><br></pre></td></tr></table></figure></div>\n\n<p>更多进阶的命令，可以查看 <a class=\"link\"   href=\"https://www.runoob.com/note/56524\" >Git 常用命令大全 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，内容更加详细(*^_^*)。</p>\n",
            "tags": [
                "Git"
            ]
        },
        {
            "id": "https://catisnotfound.github.io/2024/04/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8-Github-Page-%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "https://catisnotfound.github.io/2024/04/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%9C%A8-Github-Page-%E4%B8%8A%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "搭建个人博客（一）：如何在 Github Page 上搭建我的个人博客",
            "date_published": "2024-04-23T11:08:53.000Z",
            "content_html": "<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>如上标题，现在可以拥有属于自己的个人博客了 ~（＾▽＾）~ ，</p>\n<p>关于个人博客，可以利用 Github Page 来搭建自己的个人博客。</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/5.jpg\"></p>\n<h2 id=\"怎么做？\"><a href=\"#怎么做？\" class=\"headerlink\" title=\"怎么做？\"></a>怎么做？</h2><h3 id=\"1-注册-Github\"><a href=\"#1-注册-Github\" class=\"headerlink\" title=\"1. 注册 Github\"></a>1. 注册 Github</h3><p>既然提到了 Github Page ，首先就得<a class=\"link\"   href=\"https://github.com/signup\" >注册自己的 Github 账号 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。</p>\n<blockquote>\n<p>如果 Github 界面打不开，建议使用 <a class=\"link\"   href=\"https://steampp.net/\" >Watt Toolkit <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>😃，（不仅可以加速 Steam、橙子、育碧，同时也能加速 Github）</p>\n<p>注册一个 Github 账号只需要邮箱，并且进行邮箱验证就能快速完成！ヾ(•ω•&#96;)o</p>\n</blockquote>\n<h3 id=\"2-创建自己的仓库\"><a href=\"#2-创建自己的仓库\" class=\"headerlink\" title=\"2. 创建自己的仓库\"></a>2. 创建自己的仓库</h3><p>注册之后，接下来就要创建自己的仓库，<br>首先点击【New】，如下图：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/1.jpg\" alt=\"1.jpg\"></p>\n<p>其次，创建仓库时，<strong>仓库名一定要以<code>[你的用户名].github.io</code> 为名，</strong> 默认下都会将其设为 Github Page，之后就能完成创建。具体看下图：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/2.jpg\" alt=\"2.jpg\"></p>\n<p>创建完成之后，点击进入你的仓库项目，依次点击【Settings】→ 【Pages】→【Deploy from a branch】，并选择【Github Action】（作此步是方便为了后期可以更换框架来改善自己的博客网页）<br><img loading=\"lazy\" src=\"/images/2024/042301/2.1.jpg\" alt=\"2.1.jpg\"></p>\n<h3 id=\"3-选择框架\"><a href=\"#3-选择框架\" class=\"headerlink\" title=\"3. 选择框架\"></a>3. 选择框架</h3><p>当你做完上述步骤后，你可以直接访问自己的网页，如下图：<br><img loading=\"lazy\" src=\"/images/2024/042301/3.0.jpg\" alt=\"3.0.jpg\"></p>\n<p>接下来就是选择网页框架。这里就以 Hexo 为例，这里就只需要用到 <code>git</code> 和 <code>node.js</code> 两个依赖软件了，关于详细地安装步骤，请直接参照<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/\" >官方文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>即可</p>\n<p>完成后的搭建，大概是长这样的：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/3.jpg\" alt=\"3.jpg\"></p>\n<p>当然，这还不够，你还可以给它更换一个更好看的主题，这里作者就用了 Redefine 主题，大概就是长这样的(*^_^*)：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/4.jpg\" alt=\"4.jpg\"></p>\n\n  <div class=\"note-large blue\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-lightbulb\"></i><p>跳转提示</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>关于怎么配置这个主题，</p>\n<p>请跳转到：<a href=\"../../24/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE-Hexo-%E4%BD%BF%E7%94%A8-Rendefine-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2\">【搭建个人博客（二）：如何详细配置 Hexo 使用 Rendefine 主题美化博客】</a></p>\n\n    </div>\n  </div>\n\n<p>最后简单的做个配置，最终呈现了这样的效果：</p>\n<p><img loading=\"lazy\" src=\"/images/2024/042301/5.jpg\" alt=\"5.jpg\"></p>\n<h3 id=\"4-上传到-Github\"><a href=\"#4-上传到-Github\" class=\"headerlink\" title=\"4. 上传到 Github\"></a>4. 上传到 Github</h3><p>接下来，将本地上制作好的内容上传到 Github 仓库中。关于怎么上传部署 Github Pages，<a class=\"link\"   href=\"https://hexo.io/zh-cn/docs/github-pages\" >请点击查看关于 Hexo 上传部署到 Github Pages 的教程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p>首次执行，需要下列的所有命令：</p>\n<div class=\"highlight-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone [你的Github仓库地址]</span><br><span class=\"line\">cp -r [你的博客名称]/* [Github仓库名称] # 注意两个路径之间留下至少一个空格</span><br><span class=\"line\">cd [Github仓库名称]</span><br><span class=\"line\">git config --global user.name &quot;[你的Github昵称]&quot;</span><br><span class=\"line\">git config --global user.email &quot;[你注册 Github 时所用的邮箱]&quot;</span><br><span class=\"line\">git remote add origin [你的Github仓库地址]</span><br><span class=\"line\">git add *</span><br><span class=\"line\">git commit -m &quot;这里随便写点什么&quot; # 此行指令可不写</span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></div>\n\n<p>等待上传完成即可(*^_^*)</p>\n<hr>\n<h2 id=\"写在后面\"><a href=\"#写在后面\" class=\"headerlink\" title=\"写在后面\"></a>写在后面</h2><p>下一篇将继续详细【<a href=\"../../24/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE-Hexo-%E4%BD%BF%E7%94%A8-Rendefine-%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E5%8D%9A%E5%AE%A2\">配置 Hexo，以及如何使用 Redefine 主题美化博客</a>】</p>\n<p>本篇文章中部分没有提到的内容，下一篇也将会详细介绍(*^_^*)</p>\n",
            "tags": [
                "博客搭建",
                "Git",
                "Hexo"
            ]
        }
    ]
}