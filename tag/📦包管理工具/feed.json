{
    "version": "https://jsonfeed.org/version/1",
    "title": "CatIsNotFound • All posts by \"📦包管理工具\" tag",
    "description": "一个基于 Hexo 框架的个人博客网站",
    "home_page_url": "https://CatIsNotFound.github.io",
    "items": [
        {
            "id": "https://catisnotfound.github.io/2025/04/Conan-Easy-2-use/",
            "url": "https://catisnotfound.github.io/2025/04/Conan-Easy-2-use/",
            "title": "Conan 简要用法（包含 IDE）",
            "date_published": "2025-04-12T06:02:29.000Z",
            "content_html": "<h1 id=\"写在最前\"><a href=\"#写在最前\" class=\"headerlink\" title=\"写在最前\"></a>写在最前</h1><blockquote>\n<p><strong>简介</strong><br>Conan 是一个流行的跨平台 C++ 包管理器。它可以帮助我们在不同的操作系统和环境中管理和共享C++包，让我们更轻松、更高效地开发 C++ 应用。</p>\n</blockquote>\n<p>本文主要介绍了 Conan 2.x 版本的简要用法以及如何在项目中使用 Conan 导入第三方库。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"PIP-包管理下载【非常建议👍】\"><a href=\"#PIP-包管理下载【非常建议👍】\" class=\"headerlink\" title=\"PIP 包管理下载【非常建议👍】\"></a>PIP 包管理下载【非常建议👍】</h2><p>关于 Conan 包管理器，这里<strong>非常值得用 Python PIP 的方式安装</strong>。你仅需执行以下命令即可：</p>\n<div class=\"code-container\" data-rel=\"Shell\"><figure class=\"iseeu highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install conan</span><br></pre></td></tr></table></figure></div>\n\n<p><strong>注意：在 Windows 系统下，若要使用 <code>pip</code> 指令安装 Conan，请先安装 Python3！</strong></p>\n\n  <div class=\"note-large yellow\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-warning\"></i><p>Linux 下需要注意</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>对于不同的 Linux 发行版，对应的安装命令如下：</p>\n<p><strong>Debian&#x2F;Ubuntu 系</strong></p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/conan-io/conan/releases/download/2.15.0/conan-2.15.0-amd64.deb <span class=\"comment\"># 这里的 2.15.0 可以替换为其它最新的版本号</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> dpkg -i conan*.deb</span><br></pre></td></tr></table></figure></div>\n<p><em>注意：Debian&#x2F;Ubuntu 系下需要通过<a href=\"#%E5%AE%89%E8%A3%85%E5%8C%85%E4%B8%8B%E8%BD%BD\">安装包下载</a>的方式进行安装！</em></p>\n<p><strong>Fedora&#x2F;Redhat 系</strong></p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> dnf install python3-pip -y</span><br></pre></td></tr></table></figure></div>\n<p><em>注意：Redhat 7及以下版本可能使用的是 YUM 包管理器，因此需要将 <code>dnf</code> 替换成 <code>yum</code> 才可用。</em> </p>\n<p><strong>Arch&#x2F;Majaro 系</strong></p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yay -S conan</span><br></pre></td></tr></table></figure></div>\n<p><em>注意：请确保你的 Arch&#x2F;Majaro 系已经安装了 <code>yay</code> 包管理工具！</em></p>\n<p><strong>openSUSE 系</strong></p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zypper install python3-pip</span><br><span class=\"line\">python3-pip install conan</span><br></pre></td></tr></table></figure></div>\n\n    </div>\n  </div>\n\n\n  <div class=\"note-large blue\">\n    <div class=\"notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center\">\n      <i class=\"notel-icon fa-solid fa-solid fa-book\"></i><p>安装事项（引用自官方文档）</p>\n\n    </div>\n    <div class=\"notel-content\">\n      <p>请仔细阅读：</p>\n<ul>\n<li>请确保您的 pip 安装与 Python (&gt;&#x3D; 3.6) 版本相匹配。</li>\n<li>在 Linux 上，您可能需要 sudo 权限才能全局安装 Conan。</li>\n<li>我们强烈建议使用 virtualenvs（virtualenvwrapper 非常好用）来处理与 Python 有关的一切（请查看 <a class=\"link\"   href=\"https://virtualenvwrapper.readthedocs.io/en/stable/\" >https://virtualenvwrapper.readthedocs.io/en/stable/<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 或 Windows 上的 <a class=\"link\"   href=\"https://pypi.org/project/virtualenvwrapper-win\" >https://pypi.org/project/virtualenvwrapper-win<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> ）。对于 Python 3，也可以使用内置模块（请查看 <a class=\"link\"   href=\"https://docs.python.org/3/library/venv.html\" >https://docs.python.org/3/library/venv.html<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> ）。如果不使用 virtualenv，conan 依赖项可能会与先前存在的依赖项发生冲突，尤其是当您将 Python 用于其他用途时。</li>\n<li>在 macOS 上，尤其是可能有系统完整性保护的最新版本，pip 可能会失败。请尝试使用 <code>virtualenvs</code>，或使用 <code>pip install --user conan</code> 将其安装到 Python 用户的安装目录中。</li>\n<li>有些 Linux 发行版（如 Linux Mint）要求在安装后重启（shell 重启，如果不够，则注销&#x2F;系统），因此 Conan 会在路径中找到。</li>\n</ul>\n\n    </div>\n  </div>\n\n<h2 id=\"安装包下载\"><a href=\"#安装包下载\" class=\"headerlink\" title=\"安装包下载\"></a>安装包下载</h2><p>如果没有安装 Python，请直接通过 <a class=\"link\"   href=\"https://github.com/conan-io/conan/releases\" >github.com<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a> 下载对应操作系统的安装包即可。</p>\n<h2 id=\"验证方法\"><a href=\"#验证方法\" class=\"headerlink\" title=\"验证方法\"></a>验证方法</h2><p>如果要检查是否已经安装了 Conan，请直接执行如下命令即可：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan --<span class=\"built_in\">help</span></span><br><span class=\"line\">conan --version</span><br></pre></td></tr></table></figure></div>\n\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><h2 id=\"必要配置\"><a href=\"#必要配置\" class=\"headerlink\" title=\"必要配置\"></a>必要配置</h2><h3 id=\"修改必要目录\"><a href=\"#修改必要目录\" class=\"headerlink\" title=\"修改必要目录\"></a>修改必要目录</h3><p>以 Windows 系统为例，Windows 系统在默认情况下会将所有缓存下载及配置文件存放入 <code>C:\\Users\\&#123;你的用户名&#125;\\.conan2</code>。为了尽量减少 C 盘存储空间的压力，建议直接添加必要的环境变量以达到修改配置缓存目录的目的。具体操作如下：</p>\n<ol>\n<li><p>在电脑上新建自定义目录（这里以 <code>D:/conan</code> 目录为例）</p>\n</li>\n<li><p>在自己的电脑上按下 <kbd>Windows</kbd>+<kbd>X</kbd> 快捷键，按下 <code>Y</code> 以选择<strong>系统</strong>。在系统信息一栏中找到<strong>高级系统设置</strong>。<br>在弹出的窗口中按照如下图指示添加两个用户变量 <code>CONAN_HOME</code> 和 <code>CONAN_USER_HOME</code> 即可：<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/env_config.jpg\"\n                     \n                ></p>\n</li>\n<li><p>保存之后，打开自己的命令行，执行如下命令，以查看是否成功修改了自定义路径。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan config home</span><br></pre></td></tr></table></figure></div></li>\n<li><p>当输出为你的自定义目录即可完成修改。</p>\n</li>\n</ol>\n<h3 id=\"生成自己的配置文件\"><a href=\"#生成自己的配置文件\" class=\"headerlink\" title=\"生成自己的配置文件\"></a>生成自己的配置文件</h3><p>在命令行下，执行如下命令，Conan 会自动生成一份配置文件。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan profile detect</span><br></pre></td></tr></table></figure></div>\n<p>若已经生成了配置文件，执行如下命令即可显示当前主机的配置文件。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan profile show</span><br></pre></td></tr></table></figure></div>\n\n<div class=\"code-container\" data-rel=\"Ini\"><figure class=\"iseeu highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">;主机配置文件</span></span><br><span class=\"line\">Host profile:</span><br><span class=\"line\"><span class=\"section\">[settings]</span></span><br><span class=\"line\"><span class=\"attr\">arch</span>=x<span class=\"number\">86_64</span>                   <span class=\"comment\">;系统架构</span></span><br><span class=\"line\"><span class=\"attr\">build_type</span>=Release            <span class=\"comment\">;构建类型：Debug/Release</span></span><br><span class=\"line\"><span class=\"attr\">compiler</span>=msvc                 <span class=\"comment\">;编译器: msvc/gcc</span></span><br><span class=\"line\"><span class=\"attr\">compiler.cppstd</span>=<span class=\"number\">17</span>            <span class=\"comment\">;C++ 标准</span></span><br><span class=\"line\"><span class=\"attr\">compiler.runtime</span>=dynamic      <span class=\"comment\">;编译器运行时库</span></span><br><span class=\"line\"><span class=\"attr\">compiler.runtime_type</span>=Release <span class=\"comment\">;编译器运行时类型</span></span><br><span class=\"line\"><span class=\"attr\">compiler.version</span>=<span class=\"number\">194</span>          <span class=\"comment\">;编译器版本</span></span><br><span class=\"line\"><span class=\"attr\">os</span>=Windows                    <span class=\"comment\">;操作系统</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">;构建机配置文件</span></span><br><span class=\"line\">Build profile:</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure></div>\n\n<p>关于配置文件的位置，一般情况下，通过命令行即可查看配置文件所在的路径：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan profile list <span class=\"comment\"># 获取所有的配置文件名</span></span><br></pre></td></tr></table></figure></div>\n\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan profile path default <span class=\"comment\"># default：配置文件名</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"示例：使用-Conan-导入第三方库\"><a href=\"#示例：使用-Conan-导入第三方库\" class=\"headerlink\" title=\"示例：使用 Conan 导入第三方库\"></a>示例：使用 Conan 导入第三方库</h2><p>在自己的 C++ 项目里，如果需要使用 Conan 包管理器来实现导入第三方库，需要做以下几个步骤：</p>\n<h3 id=\"创建新的-C-项目\"><a href=\"#创建新的-C-项目\" class=\"headerlink\" title=\"创建新的 C++ 项目\"></a>创建新的 C++ 项目</h3><p>举个例子：新建一个项目（名为 <code>MyJson</code>），并在项目里导入 <code>Json</code> 第三方库，其对应的 <code>CMakeLists.txt</code> 文件如下：</p>\n<div class=\"code-container\" data-rel=\"Cmake\"><figure class=\"iseeu highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">cmake_minimum_required</span>(VERSION <span class=\"number\">3.30</span>)  </span><br><span class=\"line\"><span class=\"keyword\">project</span>(MyJson)  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">find_package</span>(nlohmann_json REQUIRED)  <span class=\"comment\"># 在项目中导入所需的第三方包</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">set</span>(CMAKE_CXX_STANDARD <span class=\"number\">17</span>)  </span><br><span class=\"line\"><span class=\"keyword\">add_executable</span>(MyJson main.cpp)  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(MyJson nlohmann_json::nlohmann_json)</span><br></pre></td></tr></table></figure></div>\n\n<p>在 <code>main.cpp</code> 文件下，编辑以下内容：</p>\n<div class=\"code-container\" data-rel=\"Cpp\"><figure class=\"iseeu highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;nlohmann/json.hpp&gt;</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span>  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> my_json = <span class=\"string\">R&quot;(  </span></span><br><span class=\"line\"><span class=\"string\">\t  &#123;  </span></span><br><span class=\"line\"><span class=\"string\">\t    &quot;host&quot;: &quot;127.0.0.1&quot;,    </span></span><br><span class=\"line\"><span class=\"string\">\t    &quot;port&quot;: 8000</span></span><br><span class=\"line\"><span class=\"string\">\t  &#125;</span></span><br><span class=\"line\"><span class=\"string\">\t)&quot;</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">auto</span> parse = nlohmann::json::<span class=\"built_in\">parse</span>(my_json);  </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Your host: &quot;</span> &lt;&lt; parse[<span class=\"string\">&quot;host&quot;</span>].<span class=\"built_in\">get</span>&lt;std::string&gt;() &lt;&lt; std::endl;  </span><br><span class=\"line\">    std::cout &lt;&lt; <span class=\"string\">&quot;Your port: &quot;</span> &lt;&lt; parse[<span class=\"string\">&quot;port&quot;</span>].<span class=\"built_in\">get</span>&lt;<span class=\"type\">int</span>&gt;() &lt;&lt; std::endl;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"编写-Conanfile-文件\"><a href=\"#编写-Conanfile-文件\" class=\"headerlink\" title=\"编写 Conanfile 文件\"></a>编写 Conanfile 文件</h3><p>为了添加所需要的第三方库，你需要在项目源目录下新建 <code>conanfile.txt</code> 文件。</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[requires]</span><br><span class=\"line\">nlohmann_json/3.11.3</span><br><span class=\"line\">[generators]</span><br><span class=\"line\">CMakeDeps</span><br><span class=\"line\">CMakeToolchain</span><br><span class=\"line\">[layout]</span><br><span class=\"line\">cmake_layout</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"下载与安装第三方库\"><a href=\"#下载与安装第三方库\" class=\"headerlink\" title=\"下载与安装第三方库\"></a>下载与安装第三方库</h3><p>接下来，在自己的项目源目录下打开命令行，下载并安装需要的包。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conan install . --build=missing [--output-folder=build]</span><br></pre></td></tr></table></figure></div>\n\n<p>这里的 <code>--build=missing</code> 用于检查 Conan 是否安装第三方库，（若没有，则自动下载安装）<br>这里的 <code>--output-folder</code> （可选参数）为输出的路径，这里默认为 <code>build</code> 目录。</p>\n<h3 id=\"编译项目\"><a href=\"#编译项目\" class=\"headerlink\" title=\"编译项目\"></a>编译项目</h3><p>在命令行下执行如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> build</span><br><span class=\"line\"><span class=\"comment\"># Windows 下执行：</span></span><br><span class=\"line\">cmake .. -DCMAKE_TOOLCHAIN_FILE=<span class=\"string\">&quot;./generators/conan_toolchain.cmake&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Linux 下执行：</span></span><br><span class=\"line\">cmake .. -DCMAKE_TOOLCHAIN_FILE=<span class=\"string\">&quot;./Release/generators/conan_toolchain.cmake&quot;</span> -DCMAKE_BUILD_TYPE=Release</span><br><span class=\"line\"><span class=\"comment\"># 其它 OS 可能未测试</span></span><br></pre></td></tr></table></figure></div>\n\n<p>当能正常看到以下提示时，表示构建已完成。</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\">-- Conan: Target declared &#x27;nlohmann_json::nlohmann_json&#x27;</span><br><span class=\"line\">-- Configuring done (5.6s)</span><br><span class=\"line\">-- Generating done (0.0s)</span><br><span class=\"line\">-- Build files have been written to: D:/MyJson/build</span><br></pre></td></tr></table></figure></div>\n\n<p>假如出现以下报错（找不到第三方库）的情况：</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Error at CMakeLists.txt:4 (find_package):</span><br><span class=\"line\">  By not providing &quot;Findnlohmann_json.cmake&quot; in CMAKE_MODULE_PATH this</span><br><span class=\"line\">  project has asked CMake to find a package configuration file provided by</span><br><span class=\"line\">  &quot;nlohmann_json&quot;, but CMake did not find one.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    nlohmann_jsonConfig.cmake</span><br><span class=\"line\">    nlohmann_json-config.cmake</span><br><span class=\"line\"></span><br><span class=\"line\">  Add the installation prefix of &quot;nlohmann_json&quot; to CMAKE_PREFIX_PATH or set</span><br><span class=\"line\">  &quot;nlohmann_json&quot; provides a separate development package or SDK, be sure it</span><br><span class=\"line\">  has been installed.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">-- Configuring incomplete, errors occurred!</span><br></pre></td></tr></table></figure></div>\n\n<p>建议直接将原有的 <code>build</code> 目录删除，并再次在<strong>项目源目录下</strong>执行以下命令以再次生成 <code>build</code> 目录即可。</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ..</span><br><span class=\"line\"># rm -rf build # Linux / Mac 下执行</span><br><span class=\"line\"># rm build -R  # Windows 下执行</span><br><span class=\"line\">conan install . --build=missing</span><br></pre></td></tr></table></figure></div>\n\n<h3 id=\"运行程序\"><a href=\"#运行程序\" class=\"headerlink\" title=\"运行程序\"></a>运行程序</h3><p>完成上述构建之后，在 <code>build</code> 目录下执行以下命令以编译程序即可。</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake --build . --config Release</span><br></pre></td></tr></table></figure></div>\n\n<p>在 Windows 系统下，如果你使用的是 MSVC 编译器，直接执行如下：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./Release/MyJson.exe</span><br></pre></td></tr></table></figure></div>\n\n<p>在 Linux 系统下，执行：</p>\n<div class=\"code-container\" data-rel=\"Bash\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./MyJson</span><br></pre></td></tr></table></figure></div>\n\n<p>若能正常显示如下输出结果即可。</p>\n<div class=\"code-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your host: 127.0.0.1</span><br><span class=\"line\">Your port: 8000</span><br></pre></td></tr></table></figure></div>\n\n\n<h1 id=\"IDE-工具下使用-Conan\"><a href=\"#IDE-工具下使用-Conan\" class=\"headerlink\" title=\"IDE 工具下使用 Conan\"></a>IDE 工具下使用 Conan</h1><p>以目前作者的了解，对于不同的 IDE，有不同的安装与编译方式，这里讲以下几种：</p>\n<h2 id=\"Visual-Studio\"><a href=\"#Visual-Studio\" class=\"headerlink\" title=\"Visual Studio\"></a>Visual Studio</h2><h3 id=\"1-安装插件\"><a href=\"#1-安装插件\" class=\"headerlink\" title=\"1. 安装插件\"></a>1. 安装插件</h3><p>在菜单栏中选择 <strong>扩展 → 管理扩展</strong>，并在搜索栏中搜索 Conan，按照如下图安装即可。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_vs.jpg\"\n                     \n                ></p>\n<p>当弹出以下窗口时，点击 【Modify】进行安装，<strong>在此安装期间，请关闭 IDE！</strong><br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_vs_2.jpg\"\n                     \n                ><br>当安装已经完成后，再次打开 IDE 即可。</p>\n<h3 id=\"2-添加第三方库\"><a href=\"#2-添加第三方库\" class=\"headerlink\" title=\"2. 添加第三方库\"></a>2. 添加第三方库</h3><p>按如下图所示，在菜单栏中打开 Conan 软件包管理窗口。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_vs_3.jpg\"\n                     \n                ><br>再按照如下图所示，点击 【设置】图标，选择使用系统 Conan 即可。<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_vs_4.jpg\"\n                     \n                ></p>\n<p>完成设置后，打开自己的项目，在 Conan 软件包管理窗口下，搜索要安装入项目的软件包并添加项目即可。<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_vs_5.jpg\"\n                     \n                ></p>\n<h3 id=\"3-使用\"><a href=\"#3-使用\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h3><p>关于使用，每次添加或删除，你需要在自己的项目中，</p>\n<ul>\n<li>先执行菜单栏中的<strong>生成 → 清理解决方案</strong>。</li>\n<li>再执行菜单栏中的<strong>生成 → 生成解决方案</strong>。</li>\n<li>最后尝试调试你的项目即可。</li>\n</ul>\n<p><strong>注意：Visual Studio 下只支持使用 MSBuild 类型的项目，不支持使用 CMake 类型的项目。</strong><br><del class=\"mask\">（此处别问为什么？是插件告诉我的 (&#x2F;_ \\) ）</del></p>\n<h2 id=\"Jetbrain-CLion\"><a href=\"#Jetbrain-CLion\" class=\"headerlink\" title=\"Jetbrain CLion\"></a>Jetbrain CLion</h2><h3 id=\"1-安装插件-1\"><a href=\"#1-安装插件-1\" class=\"headerlink\" title=\"1. 安装插件\"></a>1. 安装插件</h3><p>若要在 CLion 下使用 Conan，请直接下载并安装插件 Conan。具体点击 <strong>文件 → 设置 → 插件</strong></p>\n<p>安装插件后，请直接重启 IDE。</p>\n<h3 id=\"2-添加所需的第三方库\"><a href=\"#2-添加所需的第三方库\" class=\"headerlink\" title=\"2. 添加所需的第三方库\"></a>2. 添加所需的第三方库</h3><p>按照如下图所示的操作进行：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_clion.jpg\"\n                     \n                ><br><em>需要注意：这里的项目必须要包含 <code>conan_provider.cmake</code> 文件（自动生成的文件），否则 CLion 将无法正常编译！</em><br>具体方式，即点击如下图的刷新按钮，文件会自动生成。如果没有反应，请反复重试或直接重启 IDE。<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_clion_2.jpg\"\n                     \n                ><br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_clion_3.jpg\"\n                     \n                ><br>关于安装，请直接在搜索栏中搜索要安装的第三方库，并点击 【Use in Project】 即可。<br><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_clion_4.jpg\"\n                     \n                ></p>\n<h3 id=\"3-使用-1\"><a href=\"#3-使用-1\" class=\"headerlink\" title=\"3. 使用\"></a>3. 使用</h3><p>安装完对应的第三方库， 你还需要在自己的项目里（即：<code>CMakeLists.txt</code> 文件）导入第三方库才能使用，具体见上文中的[示例：创建新的 C++ 项目](#创建新的 C++ 项目) 。</p>\n<h2 id=\"Qt-Creator\"><a href=\"#Qt-Creator\" class=\"headerlink\" title=\"Qt Creator\"></a>Qt Creator</h2><h3 id=\"1-激活插件\"><a href=\"#1-激活插件\" class=\"headerlink\" title=\"1. 激活插件\"></a>1. 激活插件</h3><p>在左边的插件，搜索 Conan 并激活，如下图所示：</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_qt.jpg\"\n                     \n                ></p>\n<h3 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h3><p>点击你的项目，在如下图操作中添加构建步骤，选择 <code>conan install</code> 选项。</p>\n<p><img loading=\"lazy\"  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/images/2025/04/conan_qt_2.jpg\"\n                     \n                ></p>\n<p><strong>需要注意的是：Qt Creator 对于每一个项目，你都需要在项目源目录下单独新建一个 <code>conanfile.txt</code> 或 <code>conanfile.py</code> 文件才能正确编译。否则会提示找不到文件！</strong></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p>Conan 官方文档说明如下：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://docs.conan.io/2/installation.html\" >Install — conan 2.15.0 documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://docs.conan.io/2/tutorial/consuming_packages/build_simple_cmake_project.html\" >Build a simple CMake project using Conan — conan 2.15.0 documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<p>有关于 IDE 配置 Conan 的官方文档如下：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://marketplace.visualstudio.com/items?itemName=conan-io.conan-vs-extension\" >Conan Extension for Visual Studio - Visual Studio Marketplace<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.jetbrains.com/help/clion/conan-plugin.html\" >Conan plugin | CLion Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n<li><a class=\"link\"   href=\"https://doc.qt.io/qtcreator/creator-project-conan.html\" >Conan Package Manager | Qt Creator Documentation<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n<p>其它参考：</p>\n<ul>\n<li><a class=\"link\"   href=\"https://stackoverflow.com/questions/62997869/how-to-install-conan-package-manager-on-opensuse-tumbleweed-the-most-correct-way\" >How to install Conan package manager on openSUSE Tumbleweed the most correct way? - StackOverflow<i class=\"fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon\"></i></a></li>\n</ul>\n",
            "tags": [
                "Python",
                "C_and_Cpp",
                "Conan",
                "📦包管理工具"
            ]
        }
    ]
}